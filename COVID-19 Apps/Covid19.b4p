#!/usr/local/bin/Beyond4P

include ( Support Library );
include ( Office Library );
include ( Style Library );

runtime settings[verbose] 			= quiet;
local settings[date format] 			= "MM/DD/YYYY";
local settings[date separator] 			= "/";

CH cantons[] = { AG, AI, AR,  BE, BL, BS,  FR, GE, GL,  GR, JU, LU,  NE, NW, OW,  SG, SH, SO,  SZ, TG, TI,  UR, VD, VS,  ZG, ZH };

CH url  name[] = "https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv/COVID19_Fallzahlen_Kanton_XX_total.csv"; // XX = Placeholder Kanton
CH file name[] = "./inputs/time_series_covid19_Switzerland_XX.csv";
US file name[] = "./inputs/US_states_daily.csv";


// COVID 19 Analyzer

// Note: All tables in Beyond4P are global.  If you wish to use a local table inside a function, then create one with unique name
// and delete it after leaving the function.


define procedure ( download covid data )
{
	directory create all ( inputs );
	if (input quick ignore case("Download latest data from the Web? [NY]", NY )=Y)
	{	
		echo("Download country data worldwide from github (John Hopikins University)");
		file download overwrite( "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", "./inputs/time_series_covid19_Confirmed_global.csv" );
		file download overwrite( "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", "./inputs/time_series_covid19_Deaths_global.csv" );


		echo("Load state date in USA");
		file download overwrite( "https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/master/data/states_daily_4pm_et.csv", US file name[] );

		echo("Load canton data in Switzerland (BAG)");
		for all parameters( CH cantons[], canton[] )
		{
		    echo("    Download canton ", canton[] );
		    file download overwrite( replace( CH url name[], XX, canton[] ), replace( CH file name[], XX, canton[] ) );
		}
	}
}


define procedure ( load additional data, {{ case, literal }} )
{
	echo("Load daily U.S.states data");

	table load		( us, US file name[], ',');

	all states[] 		= 'US ' +^ +trim([us:state,..]);
	table append		( case[], all states[] );

	table process (us,
		state[] 	= 'US '+ [state];

		date column[] 	= table column number( case[], literal(date([date]),"YYYY-MM-DD") );
		if ( date column[] >= 0 )
		{
		    [case[]:"Country/Region",state[],date column[]] = select by value (case[], Confirmed, [positive], Deaths, [death], Tested, [positive]+[negative], Hospitalized, [hospitalized] ); 
		} );


	echo("Load cantons in Switzerland");
	for all parameters( CH cantons[], canton[] )
	{
	    echo("    Load canton ", canton[] );
	    table load( ch, replace( CH file name[], XX, canton[] ), ',');

	    with table( case[], table length( case[] ) )
	    {
		["Country/Region"] = "Switzerland " + canton[];
		table process( ch,
			if ( table column number( case[], [date] ) >= 0 )
			{
				[^[date]] = select by value (case[], Confirmed, [ncumul_conf], Deaths, [ncumul_deceased], Tested, [ncumul_tested], Hospitalized, [ncumul_hosp] );
			} ) ;

		value[] = 0;
		for all parameters( [case[]::'####-##-##',0], date[] ) // Fill the reporting gaps
		{
		    if ([date[]]='') [date[]] = value[]; else: value[] = [date[]];
		}
	    }
	}

}


define procedure ( load files, {{ case, literal }}  )
{
	forget memorized table columns;

	load blank table[]= case[]<>Confirmed,Deaths; // For all other parameters,  load 'Confirmed' table then delete all contents (waste of time, but very fast)

	file[] = replace( "./inputs/time_series_covid19_XXX_global.csv", XXX, select if ( load blank table[], Confirmed, case[] ) );

	table load				( case[], file[], ',' );

	table delete columns			( case[], { Lat, Long } );
	table delete selected rows		( case[], find(["Province/State"],",") >= 0  | ["Country/Region"]='*Princess*' | ["Province/State"]='*Princess*'); // Keep whole countries + states, but no counties and cruise ships. for time being

	// For countries containing details at province/state level, add aggregated data for the whole countries.

	table copy table			( case[], copy );
	table delete selected rows		( copy  , ["Province/State"] = '' );
	table consolidate			( copy  , "Country/Region", [copy:'>Country/Region'..,0], sum );
	table process selected rows		( case[], ["Province/State"] != "", ["Country/Region"] += " " + ["Province/State"] );

	table delete selected rows		( copy, [case[]:"Country/Region",["Country/Region"]] >= 0 ); // Delete consolidated countries if main country is already listed (e.g. Netherlands, France), but not Canada, Australia

	table merge				( copy  , case[] );
	table delete columns			( case[], "Province/State" );
	[case[]:'>Country/Region'..,0] 		= deep( literal,  { deep( date, { [case[]:'>Country/Region'..,0] } ), "YYYY-MM-DD" } ); // Clean up date format to international format

	if (load blank table[])			[case[]: :'####-##-##', ..] = 0;


	load additional data			( case[] );

//	table save ( case[], test.csv );	interactive;
}



define procedure( calculate recoveries )
{
	forget memorized table columns;

	table copy table			( 'Confirmed', 'Recovered' );
	[Recovered::'####-##-##',..] 		= 0; // No reported recoveries for time being

	lag[] = 14;				// Assume healthy after 14 days if no casuality happend.

	data[] = 'Recovered Predicted';
	table copy table			( 'Confirmed', data[] );
	dates[] 				=  [data[]::'####-##-##',0];

	[data[]: dates[]{lag[].. -1},..] 	= [data[]: dates[]{0..-1-lag[]},..];	// Right-shift copy by # lag days
	[data[]: dates[]{0..lag[]-1},..] 	= 0;					// And set first # lag days to 0

	[data[]: dates[],..] 			-^^= [Deaths: dates[],..];		// Subtract casualities
	[data[]: dates[],..] 			= deep( max 123, { [data[]: dates[],..], [Recovered: dates[],..] }, 2 );	// If reported recoveries are higher, then use them

}


//	Folloing procedure derives a "Day 0" or "Day 1" analysis.
//
//

define procedure ( day 0 alignment, {{ data, literal }} )
{
	forget memorized table columns;

	threshold[] = 2;		// 1st day is day with minimum 2 confirmed cases

	new[] = data[] + " Day Zero";
	table copy table columns		(  data[], new[], { "Country/Region", Population, Comments } );
	table insert columns			(  new[], {Maximum,"Per 100,000 inh.",CDGR per day}, 0, 'Comments' );

	dates[]					= [data[]::'####-##-##',0];
	[new[]:'>Comments'..,0]			= "Day " +^ deep( literal, {{ 1 .. dates[]{} }} );

	table process( new[],  		series[] 			= filter start include( [ data[]:dates[],row() ], >=threshold[] );
					[CDGR per day] 			= cagr( series[] );
					[Maximum]			= max 123( series[] );
					["Per 100,000 inh."]		= pick if ( [Population]>0, [Maximum] / [Population] * 100000, 0 );
					[Day 1..] 			= series[]; );

}


//	Identify the trends, "accelerating" / "stagnating" ...
//	where the last day is scaled up.   This allows for better recognition of changing trends
//


define procedure ( trend cases, {{ data, literal }} )
{
	forget memorized table columns;

	span[]-- = 7;				// Running average over 7 days
	days[]-- = 3;				// Calculate CAGR from two 3-days average at start and end

	new[] = data[] + " Trend";
	table copy table			(  data[], new[] );
	dates[] 				= [data[]::'####-##-##',0];
	1st column[]				= table column number( new[], dates[]{0} );
	last column[] 				= table column number( new[], dates[]{-1} );
	start column[] 				= table column number( new[], dates[]{0} ) + span[];

	table process ( new[], for (col[] = last column[], col[] >= start column[], col[]-- )
	{
		if ( ( product( [ col[]-span[] .. col[]-span[]+days[] ] ) <> 0) & ( [ col[]-span[] ] >= 10 ) )  // Calculate if left side contains at least 10 cases, otherwise chart is messy
		{
		    [col[]] = cagr( [ col[]-span[] .. col[] ], days[]+1 );
		}
		else
		{
		    [col[]] = "";
		}
	} );

	table process ( new[], [ 1st column[] .. start column[]-1 ] = "" );

	table insert columns			( new[], "Last Trend" );	// Last trend is calculated if last count is at least 50, otherwise figure is not accurate
	table process selected rows		( new[],  [data[]:last column[]] > 50 & product( [ data[]:last column[]-1 .. last column[] ] ) != 0, [Last Trend] = [data[]:last column[]] / [data[]:last column[]-1]-1 );
}




define procedure ( death rates )
{
	// This function does 2 comparisons:
	// Rate A:	# deaths vs. # confirmed cases (both accumulated) at same date
	// aCFR:	# Adjusted Case Fatality Risk

	forget memorized table columns;

	aCFR lag[]-- = 7;			// One comparison: Compare # deaths with cases 7 days earlier
	table insert columns			( Deaths, { Rate A, aCFR }, "", Comments );
	dates[] 				= [Deaths   ::'####-##-##',0];

	table process selected rows		( Deaths, ([Confirmed: dates[]{-1           } ] > 0), [Rate A] = [dates[]{-1} ] / [Confirmed: dates[]{-1           } ] );
	table process selected rows		( Deaths, ([Confirmed: dates[]{-1-aCFR lag[]} ] > 0), [aCFR]   = [dates[]{-1} ] / [Confirmed: dates[]{-1-aCFR lag[]} ] );
}


define procedure ( interpolate gaps , {{ data, literal }} )
{
	dates[] 				= [data[]::'####-##-##',0];
	1st column[]				= table column number( data[], dates[]{0} );
	last column[] 				= table column number( data[], dates[]{-1} );

	x axis[] = { 0 .. dates[]{}-1 };	// 0, 1, 2, ...

	table process( data[], 
	{
		x coord[] = { 0 };		// 1st point (0, y1)
		y coord[] = { select if( [1st column[]]=='', 0, [1st column[]] ) };

		for (col[] = 1st column[]+1, col[] <= last column[], col[]++ )
		{
			delta[] = [col[]] - [col[]-1];
			if (delta[] != 0 |  [col[]]<4)  // If more than 50 cases and unchanged vs. previous day, then skip (x,y) value in order to force interpolation
			{
			    x coord[] += { col[] - 1st column[] };
			    y coord[] += { select if( [col[]]=='', 0, [col[]] ) };
			}
		}
		[ 1st column[].. ] = linear interpolation( x axis[]{0.. x coord[]{-1}}, x coord[], y coord[] ); // Overwrite row with interpolated data
	} );

}






// Main Program
{
	download covid data;

	table load excel file 			( Population Data, "Country Data.xlsx", Basedata );
	table process 				( Population Data, [Population] = clean numeral( [Population] ) ); // Remove 1,000 separators, especially the non-ANSI character on HP systems in Switzerland
	data sets[] 				= { Tested, Hospitalized, Confirmed, Deaths };

	echo("In the 'Population Data', you can specify different choice patterns using capital letters", new line, "in order to focus on countries of choice.  Enter choice:");
	favor[]   = input quick ignore case("[space bar] = All favorites, Letter = Favorite as listed with that letter", " ABCDEFGHIJKLMNOPQRSTUVWXYZ" );

	for all parameters( data sets[], case[] )
	{
		load files			( case[] );
		table insert columns		( case[], {Population, Area, Region 1, Region 2,Aggregate,Maximum, "Per 100,000 inh.", Comments}, "", '>Country/Region' );
		table lookup smart ignore case	( case[], "Country/Region", {Comments,Population,Area,Region 1,Region 2,Aggregate }, Population Data, "Search Country/Region", {"Use Country/Region",Population, Area, Region 1, Region 2,Aggregate} );
		table process selected rows	( case[], [Region 1]=='', [{Population,Area}] = Not defined, ["Country/Region"] = [Comments]; [Comments]='' );
		if (favor[]!=' ')
		{
			table delete selected rows ( case[], [Population] = "Not defined" );
		}

		for all parameters( {"Region 1", "Region 2"}, region[] )
		{
		    table copy table		( case[], duplicate + region[] ); // For regions
		    table keep selected rows	( duplicate + region[], [Aggregate]=Yes );
		    table consolidate		( duplicate + region[], region[], { Population, Area } + [duplicate + region[]::'####-##-##',0], sum );
		    table process		( duplicate + region[], ["Country/Region"] = [region[]] );
		    table sort rows		( duplicate + region[], "Country/Region" );
		}
		table merge			( duplicate + Region 1, case[] );
		table merge			( duplicate + Region 2, case[] );

		if (favor[]!=' ') 
		    table keep selected rows	( case[], find( [Population Data:"Use Country/Region",["Country/Region"],Favorites], favor[] ) >= 0 );

		table delete columns		( case[], {Region 1, Region 2, Aggregate} );

		table sort rows			( case[], "Country/Region" );

		table process			( case[],
			[Maximum]		= [-1];
			["Per 100,000 inh."]	= pick if ( [Population]>0, [Maximum] / [Population] * 100000, 0 ) ); // DL


	}

	calculate recoveries;
	interpolate gaps ( Confirmed );

	trend cases ( Confirmed );
	day 0 alignment( Confirmed );
	death rates;

	// Save the data

	tables[] = { Tested, Confirmed, Confirmed Day Zero, Confirmed Trend, Recovered, Recovered Predicted, Hospitalized, Deaths };

	my time stamp[]	= literal( date(today), "YYYY-MM-DD" );
	dir name[]	= "./" + my time stamp[] + "_Results/";

	directory create all ( dir name[] );

	for all parameters( tables[], table[] )
	{
		table style table 		( table[], sheet, autofilter, 0, freeze rows, 1, freeze columns, 2 );
		table style columns		( table[], { "Country/Region", Population, Comments }, sheet, column width, 20 );
		table style columns		( table[], [table[]::'####-##-##',0] + [table[]::'Day &',0], sheet, number format, select if ( (table[]='*Trend*'), "0.00%", "#,##0")  );
		table style columns		( table[], Population, sheet, number format, "#,##0"  );
		table style columns		( table[], [table[]::'*inh*',0], sheet, number format, "0.000"  );
		table style columns		( table[], [table[]::'CDGR per day',0] + [table[]::'Last Trend',0]+ [table[]::'Rate*,aCFR',0], sheet, number format, "0.00%"  );
		translate style attributes for excel( table[] );

		table save			( table[], dir name[] + my time stamp[] + "_" + table[] + ".csv" );	
	}

	table save multiple			( tables[], tables[], dir name[] + my time stamp[] + "_Results.xls", EXCEL );
}

interactive;








