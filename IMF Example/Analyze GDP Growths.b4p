#!/usr/local/bin/Beyond4P

include( Office Library );


/*
	This Beyond4P example downloads two GDP growth reports (true Excel files with .xlsx),
	reports, align the tables and compare the growth figures.

	Written by Georg zur Bonsen, 21. Jan 2021

	As of now, LINUX 'wget' and 'curl' command cannot download the Worldbank file directly, 
	but appears to work fine under Windows.  Loading from IMF appears OK.
	Therefore, this program still causes some issues under LINUX.

*/


{
	watch start;	// Clock the job.

	if (system info[operating system] = Linux) exception( stop, "Unfortunately not yet running under LINUX" );

	// Remember: Variables always contain brackets (with or without subscripts) all time.

	gdp growth worldbank[] = "GDP Growth Worldbank.xlsx";
	gdp growth imf      [] = "GDP Growth IMF.xlsx";

	echo( "This small application shows how to retrieve some economical data and" );
	echo( "and do some analysis with them.", new line );


	echo( "Step 1 - Download the GDP growth data from Worldbank and IMF", new line );

	file download overwrite	( "http://pubdocs.worldbank.org/en/872421555426273916/Global-Economic-Prospects-June-2019-GDP-growth-data.xlsx", gdp growth worldbank[] );
	file download overwrite	( "https://www.imf.org/external/pubs/ft/weo/data/WEOhistorical.xlsx", gdp growth imf[] );


	echo( "Step 2 - Load downloaded excel files" );
	echo( "         Note: The IMF file is a huge one (> 7 MB compressed).  Allow a few minutes.", new line );

	// This is a procedure implemented in "Office Library.b4p" which loads open format Microsoft Excel files (.xlsx, .xlsm).

	table load excel file	( worldbank, gdp growth worldbank[], Statistical Appendix );
	table load excel file	( imf      , gdp growth imf      [], ngdp_rpch );


	echo( "Step 3 - Prepare Worldbank data:", new line );
	echo( "         Lift headers, remove quarterly data, add missing header ... ");

	table lift header row		( worldbank, "2016" );				// Move table headers to top row (delete the above).  One header is "2016".
	[worldbank:0,0] 		= country;					// Header name missing
	table delete columns 		( worldbank, [ worldbank: :'*Q*,', 0 ] );	// Delete all columns with quarterly data and blank columns (blankbehind comma)
	table delete selected rows	( worldbank, [country] == '', 2 );		// Delete blank row plus description row at the bottom

	// Delete the 'e' and 'f' behind the years.

	for all table selected columns	( worldbank, ('20*'), 0, col nr[], col[] )
	{
		[ col nr[] ] = WBK Y + literal([ col nr[] ]) - e - f; // Note: Since table context (table name and row number) are known, only column needs to be specified.
	}

	echo( "Step 4 - Precondition IMF data", new line );
	echo( "         Cleaning up a big an messy table !!! ... ");

	table keep columns 		( imf, { country, year, -1 } ); // Keep 1st two and the last column, forget all other.
	table rename column headers	( imf, -1, GDP growth );
	table delete selected rows	( imf, [GDP growth] = '.' );

	// The years are still listed vertically.  Move them across columns by doing a simple pivot.

	table process			( imf, [year] = IMF Y + literal([year]); [GDP growth] = round([GDP growth], 0.1 ) ); // Round the numbers for clarity
	table spread 			( imf, GDP growth, [year] );
	table consolidate		( imf, country, { year, GDP growth } + [ imf : '>GDP growth'.., 0 ], { delete, delete, sum } );

	table save( imf,       test imf 2.csv );	// Save intermediate files
	table save( worldbank, test wbk 2.csv );

	echo( "Step 5 - Now merge and align IMF and worldbank data into same table", new line );

					// Capitalize all headers and remove superscript numbers
	table process			( imf, 		[country] = ![country] - '1'-'2'-'3'-'4'-'5'-'6'-'7'-'8'-'9'-'0'-',' );
	table process			( worldbank, 	[country] = ![country] - '1'-'2'-'3'-'4'-'5'-'6'-'7'-'8'-'9'-'0'-',' );

	table merge extend columns	( imf, worldbank, country );
	table rename			( worldbank, combined );
	table sort rows			( combined, country );


	echo( "Step 6 - Compare teh IMF and Worldbank GDP figures", new line );

	years [imf]			= [ combined ::'IMF*', 0 ] -^ 'IMF ';  // Here you see how to use member (child) variables
	years [worldbank]		= [ combined ::'WBK*', 0 ] -^ 'WBK ';  // and parameter sets as contents
	years [both]			= years[imf] & years[worldbank];       // Intersect 2 sets as taught in school

	echo				( "Years in IMF       listing : ", years [imf]       );
	echo				( "Years in Worldbank listing : ", years [worldbank] );
	echo				( "Years in both      listings: ", years [both] );

	table insert columns		( combined, "Delta " +^ years[both] );

	for all parameters( years[both], year[] ) // Compare line by line
	{
		table process selected rows( combined,  (["IMF " + year[]] <> '') & (["WBK " + year[]] <> ''), 
							 ["Delta " + year[]] = ["IMF " + year[]] - ["WBK " + year[]] );
	}

	echo (new line, "processing took ", watch stop()/1000, " seconds."  );
	echo ("Everything completed.  Open Result.csv" );

	table save			( combined, Result.csv );


}