	
{

//	This file incluedes some style in the output files, e.g. user defined column width,
//	row height, font size, bold, italic, underscore, text and frame and background color,
//	autofilter already activated on a chosen row, etc.

	
	include( Style Library );

	table initialize( countries,
	{	{ Abbreviation, Country Name, Language, Country Code, National holiday },
		{ GER, Germany, German, 49, "2017-10-03" },
		{ DAN, Danmark, "Danish", 45, "2017-06-05" }, 
		{ ITA, Italy, Italian, "39" + escape + 'ss:Type="String"' , "2017-06-02"  },
		{ SPA, Spain, "Castellino & Catalan", '34' , "2017-12-06"  },
		{ USA, United States, English and Spanish, 1 , "2017-07-04" },
		{ SWI, Switzerland, Various, 41 , "2017-08-01" } } );


	table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,				Menu Selection		},
		  { 1,	"Demonstrate table save"				,	saving		},
		  { 2,	"Test style fofrmatting XML"				,	style		},
		  { 3,	"Test lightening and darkening colors"			,	colors		},
		  { 4,	"Test outputting date, number and boolean formats"	,	numbers		},
		  { I,	"Interactive (city and countries tables loaded)"	,	leave		} } );

	echo( new line );
	selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );

	table load( cities, "Cities.csv" );

	switch( selection[])
	{
	    case(saving)
	    {

		table style table( cities, sheet, wrap text, false );
		table style cells( cities, 1, 8, single, fill color, yellow );
		translate style attributes for excel( cities );
		table style cells( cities, 1, 9, single, comment, Yellow above );
		translate style attributes for html( cities );

		table style cells( countries, 2, 2, single, fill color, green );
		translate style attributes for html( countries );
		translate style attributes for excel( countries );

		echo(new line, "Save two tables in one file", new line);
		table save multiple ( {cities, countries}, {List of Cities,List of Countries}, "Cities and Countries Out excel.xls", EXCEL );
		table save multiple ( {cities, countries}, {List of Cities,List of Countries}, "Cities and Countries Out html.xls", HTML );

	    }

	    case(numbers)
	    {

		echo("Test various date, numeric and boolean representations");
		format[] = input quick ignore case("Choose H for HTML, X for EXCEL: ", HX ); 

		table initialize( test, 
		    {	{ Dates Lit 1, 	Dates Lit 2,	Dates Num,		Boolean EN, 	Boolean DE,	Boolean Num,	Numbers,	Formulas },
			{ "2017-01-30",	"30.01.2017",	abs(date("2017-01-30")),TRUE,		WAHR,		1,		123.45,		"=Wurzel(4)"  },
			{ "2017-01-30",	"30.01.2017",	abs(date("2017-01-30")),TRUE,		WAHR,		1,		123.45,		"=G2*2"  },
			{ "2017-01-30",	"30.01.2017",	abs(date("2017-01-30")),TRUE,		WAHR,		1,		123.45,		"=G2*2"  },
			{ "2017-01-30",	"30.01.2017",	abs(date("2017-01-30")),TRUE,		WAHR,		1,		123.45,		"=Root(4)"  } } )	;

		table style columns( test, {0..7}, table, column width, 14 );
		table style cells( test, Dates Num,   2, single, number format, "DD.MMM.YYYY" );
		table style cells( test, Dates Lit 1, 2, single, number format, "DD.MMM.YYYY" );
		table style cells( test, Dates Lit 2, 2, single, number format, "DD.MMM.YYYY" );
		table style rows( test, 3, sheet, type, literal );
		table style cells( test, Boolean Num, 4, single, type, boolean );
	
		if (format[] == H)
		{
			translate style attributes for html( test );
			table save( test , "Numbers out in html.xls", HTML );
		}
		else
		{
			translate style attributes for excel( test );
			table save( test, "Numbers out in excel.xls", EXCEL );
		}

	    }


	    case(colors)
	    {
		format[] = input quick ignore case("Choose H for HTML, X for EXCEL: ", HX ); 

		echo(new line, "Lighten various colors", new line);
		table save multiple ( {cities, countries}, {List of Cities,List of Countries}, "Cities and Countries Out.xls", EXCEL );

		lighten colors( table selected rows( global color table, [Cat 1]==standard ), 1, 2 );
		lighten colors( table selected rows( global color table, [Cat 1]==standard ), 2, 4 );
		lighten colors( table selected rows( global color table, [Cat 1]==standard ), 3, 8 );
		lighten colors( table selected rows( global color table, [Cat 1]==standard ), 4, 16 );
		lighten colors( table selected rows( global color table, [Cat 1]==standard ), 5, 32 );
		darken  colors( table selected rows( global color table, [Cat 1]==standard ), 1, 2 );
		darken  colors( table selected rows( global color table, [Cat 1]==standard ), 2, 4 );
		darken  colors( table selected rows( global color table, [Cat 1]==standard ), 3, 8 );
		darken  colors( table selected rows( global color table, [Cat 1]==standard ), 4, 16 );
		darken  colors( table selected rows( global color table, [Cat 1]==standard ), 5, 32 );
		weaken  colors( table selected rows( global color table, [Cat 1]==standard ), 1, 2 );
		weaken  colors( table selected rows( global color table, [Cat 1]==standard ), 2, 4 );
		weaken  colors( table selected rows( global color table, [Cat 1]==standard ), 3, 8 );
		weaken  colors( table selected rows( global color table, [Cat 1]==standard), 4, 16 );

		add color( corporate red, logo, 213, 0, 50 );
		add color( taxi beige, logo, 229, 219, 182 );

		for (y[] = 1, y[] < table length( global color table),y[]++)
		{
		    with table ( global color table, y[] )
		    {
		        table style cells( global color table, Color Name, y[], single, fill color, [HTML Color] );
			if (average([Red],[Green],[Blue])<64)
		            table style cells( global color table, Color Name, y[], single, text color, white );
			table style cells( global color table, Cat 1, y[], single, text color, [HTML Color] );

		    }
		}

		if (format[] == H)
		{
			translate style attributes for html( global color table );
			table save( global color table , "Colors out in html.xls", HTML );
		}
		else
		{
			translate style attributes for excel( global color table );
			table save( global color table, "Colors out in excel.xls", EXCEL );
		}


	    }




	    case(style)
	    {

		echo(new line, "Demonstration of various styles", new line);

		format[] = input quick ignore case("Choose H for HTML, X for EXCEL: ", HX ); 


		table style table( cities, sheet, freeze rows,    1 );
		table style table( cities, sheet, freeze columns, 2 );

		table style columns( cities,  2, sheet, hidden, true );
		table style rows   ( cities,  5, sheet, hidden, true );

		table style table( cities, sheet, font name, Calibri );
		table style table( cities, sheet, font name, Calibri );

		table style table( cities, sheet, fill color, white);  // Later on, set table back to sheet
		table style table( cities, body, fill color, gray 14 );

		table style cells( cities, {City, Country}, {0,0}, single, fill color, sky blue );

		table style cells( cities, 1, 1, single, top border, { thick , blue }, left border, { thick , yellow} );
		table style cells( cities, 1, 1, single, right border, { thick , purple}, bottom border, { thick, azur } );

		table style cells( cities, 5, 5, single, font name, arial black, font size, 12 );

		table style cells( cities, {1,2,4}, {1,2,4}, matrix, fill color, ecru );

		table style columns( cities, Country, sheet, text color, mandarin);
		table style rows( cities, 6, sheet, text color, blue );

		table style columns( cities, 4, sheet, left border, { thick, red }, right border, { thick, red }, column width, 20 );
		table style rows( cities, 6, table, top border, { thick, blue } );
		table style rows( cities, 6, table, bottom border, { thick, blue }, row height, 45 );

		table style rows( cities, 6, sheet, vertical align, center, row height, 45 );
		table style columns( cities, 0, sheet, horizontal align, right, column width, 30 );

		table style columns( cities, Inhabitants, body, number format, "#,##0" );

		table style columns( countries, Language, body, boldface, true );

		table style columns( cities, 1, sheet, column width, 20 );
		table style table( cities, table, autofilter, 0 );

		table style columns( cities, Famous attraction, sheet,column width, 12, wrap text, true ); // Make narrow to test wrap text


		table style cells( cities, 1, 4, single, comment, "Comments are one of the amazing features!" );
		table style cells( cities, 1, 5, single, comment, "Hä: a nice" + new line + "place to visit" );




/*

		// True dates need to be handled as follows:

		[cities:0,15] = "Date: ";
		[cities:1,15] = abs(date(now));
		table style cells( cities, 1, 15, single, number format, "DD-MMM-YYYY hh:mm:ss");

*/

		if (format[] == H)
		{
			translate style attributes for html( cities );
			table save( cities , "Cities out in html.xls", HTML );
		}
		else
		{
			translate style attributes for excel( cities );
			table save( cities , "Cities out in excel.xls", EXCEL );
		}

		table style reset( cities, asdf, countries );
		echo(new line, "Successfully done.", new line);

		


	    }

	}


	echo("Done.");
	interactive;

}