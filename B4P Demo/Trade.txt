
// This program makes a sort of production planning if you know the delivery start, delivery end,
// batch size (optional), school and bank holidays (also optional).
// Calendars can either be treated as Gregorian (some months are longer, other shorter) or equal (assume fixed 30 days per month).

{

//	include(working directory[] + "Utility Library.txt");

	table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,					Menu Selection		},
		  { 1,	"Trade: Distribute values over time line"		,	distribute 1		},
		  { 2,	"Trade: Distribute values over time line in table"	,	distribute 2		},
		  { I,	"Interactive"						,	leave		} } );

	do
	{

	  echo( new line );
	  selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );

  	  switch( selection[])
	  {
	    case(distribute 1)
	    {
	
		earlier[]=0; later[]=0;

		echo(new line, "Distribute a set of values", new line);

		bank holidays[] = { };
		school holidays[] = { 01.04.2018,30.04.2018 };

		ret val[]  = distribute( 100, 10, '31.08.2022', '31.08.2022', months, mon_fri, '31.07.2022','30.09.2022', date line[], distributed values[], earlier[], later[] );

// Try one of the function calls below, comment out the remaining ones.

//		ret val[] = distribute( #days, 0, '06.01.2018', '25.01.2018', days, calendar, '01.01.2018','31.01.2018', date line[], distributed values[] );
//		ret val[] = distribute( 30,    0, '06.01.2018', '25.01.2018', days, calendar, '01.01.2018','31.01.2018', date line[], distributed values[] );
//		ret val[] = distribute( 30,    0, '06.01.2018', 3, days, mon_fri, '01.01.2018','31.01.2018', date line[], distributed values[], earlier[], later[], bank holidays[], school holidays[] );


//		ret val[] = distribute( #days, 0, '01.02.2018', '10.04.2018', whole weeks, calendar, '03.01.2018','01.08.2018', date line[], distributed values[] );
//		ret val[] = distribute( 36, 0, '29.01.2018', '10.04.2018', weeks, calendar, '03.01.2018','01.08.2018', date line[], distributed values[] );
//		ret val[] = distribute advance( 36, 2, '29.01.2018', 0.5, weeks, mon_fri, '03.01.2018','01.08.2018', date line[], distributed values[], earlier[], later[], bank holidays[], school holidays[] );


//		ret val[] = distribute( #days, 0, '11.01.2019', '10.03.2020', whole months, calendar, '03.01.2018','01.07.2020', date line[], distributed values[] );
//		ret val[] = distribute advance( 70, 10, '11.01.2019', '10.03.2020', months, 30_360, '03.01.2018','01.07.2020', date line[], distributed values[] );
//		ret val[] = distribute( 1400, 0, '01.02.2018', 2, months, mon_fri, '03.01.2018','01.07.2020', date line[], distributed values[], earlier[], later[] );

//		ret val[] = distribute advance(  15, 5, '11.09.2017', '17.09.2017', days,  mon_fri, '08.09.2017', '19.09.2017', date line[], distributed values[], earlier[], later[], bank holidays[], school holidays[] );
//		ret val[] = distribute (  34, 2, '11.12.2017', '10.01.2018', whole weeks, mon_fri, '10.12.2017', '20.01.2018', date line[], distributed values[], earlier[], later[], bank holidays[], school holidays[] );

//		ret val[] = distribute( #days, 0, '11.04.2019', '10.07.2021',quarters, 30_360, '03.01.2018','01.01.2021', date line[], distributed values[], earlier[], later[] );
//		ret val[] = distribute( #days, 0, '11.04.2019', '10.07.2021',years, 30_360, '01.01.2017','01.01.2025', date line[], distributed values[] );




//		ret val[]  = distribute( 300, 10, '01.10.2017', '30.09.2022',quarters, calendar, '03.01.2018','01.01.2021', date line[], distributed values[], earlier[], later[], bank holidays[], school holidays[] );
//		ret val[]  = distribute( 300, 10, '01.10.2017', '30.09.2022',years, 30_360, '01.01.2017','01.01.2025', date line[], distributed values[], earlier[], later[] );

//		ret val[] = distribute given capacity( 10, 0, '01.01.2017', 0.5, days, mon_fri,  '01.01.2017', '31.01.2017', date line[], distributed values[], earlier[], later[] );
//		ret val[] = distribute ( 600, 0, '11.01.2017', 1, years, 30_360, '01.01.2017', '31.12.2018', date line[], distributed values[], earlier[], later[] );
//		ret val[] = distribute ( 45, 0, '11.01.2017', '10.04.2017', quarters,30_360, '01.01.2017', '31.12.2017', date line[], distributed values[], earlier[], later[] );



//		ret val[] = distribute( days, 0, '10.01.2017', '20.04.2017', months, 30_360, '31.01.2017', '15.05.2017', date line[], distributed values[], earlier[], later[] );


//		ret val[] = distribute(  10, 1, '11.09.2017', '17.09.2017', days,  calendar, '11.09.2017', '17.09.2017', date line[], distributed values[], earlier[], later[], bank holidays[], school holidays[] );
//		ret val[] = distribute(days, 1, '11.09.2017', '11.11.2017', whole weeks, calendar, '11.10.2017', '01.11.2017', date line[], distributed values[],  earlier[], later[], bank holidays[], school holidays[] );



//		ret val[] = distribute( days,0, '01.08.2017', '31.03.2019', years, 30_360, '01.01.2017', '31.12.2019', date line[], distributed values[], earlier[], later[] );
//		ret val[] = distribute( 100, 0, '12.08.2017', '03.11.2017', whole quarters, mon_fri, '15.01.2017', '25.12.2017', date line[], distributed values[] );
//		ret val[] = distribute( 100, 0, '12.02.2017', '03.09.2017', months, 30_360, '15.01.2017', '25.12.2017', date line[], distributed values[]], earlier[], later[] );
//		ret val[] = distribute( days,0, '12.08.2017', '03.11.2017', whole months, calendar, '15.01.2017', '25.12.2017', date line[], distributed values[], earlier[], later[] );
//		ret val[] = distribute( 100, 5, '12.05.2017', '12.07.2017', quarters, calendar, '22.08.2017', '02.10.2017', date line[], distributed values[], earlier[], later[] );
//		ret val[] = distribute(  10, 1, '12.08.2017', '03.10.2017', days,  calendar, '15.11.2017', '25.12.2017', date line[], distributed values[]], earlier[], later[] );


//		ret val[] = distribute( 100, 0, '01.01.2017', '15.08.2017', months, mon_fri, '15.01.2017', '25.12.2017', date line[], distributed values[], earlier[], later[] );
		echo("Function call done. Return value is ", ret val[] );
		echo("Date line   = ", date line[]);
		echo("Distributed = ", distributed values[]);
		echo("Earlier = ", earlier[], "  Later = ", later[]);
//		echo("Grand total = ", earlier[] + later[] + sum(distributed values[]) ); 

	    }


	    case(distribute 2)
	    {

		table initialize( demo table,
		{
			{ Total Value, Start Date, End Date,   Batch Size    },
			{ #days,       01.01.2017, 20.08.2017,  1 },	// Count number of days
			{ 500,         01.01.2017, 20.08.2017,  0 },	// Produce 500 within 200 days (shifts on 7 days per week)
			{ 500,         01.01.2017, 20.08.2017,  1 },	// Whole numbers only
			{ 500,         01.01.2017, 20.08.2017, 10 },	// Deliver in batches of 10
			{ 500,         01.01.2018, 20.08.2017, 10 },	// Skipped (end date is before start date)
			{ 500,         01.01.2017, 2         , 10 },	// Capacity: 2 per unit
			{ 500,         01.12.2016, 2         , 10 }	// Start a month earlier
		} );

		holidays[] = { 01.08.1900 };			// Public holiday every year
		vacation[] = { 01.07.2017,31.07.2017 };		// Summer vacation 	


		ret[] = table distribute( demo table, Total Value, Batch Size, Start Date, End Date, months, calendar, '15.01.2017', '15.08.2017',{Mmmm,de_at},-1, Earlier, Later, holidays[], vacation[] );
		ret[] = table distribute accumulate( demo table, Total Value, Batch Size, Start Date, End Date, months, calendar, '15.01.2017', '15.08.2017',{Mmmm,de_at},'#existing', Earlier, Later, holidays[], vacation[] );
		// Note: For monthly intervals, output start date is moved back to 1st day and output end date to last day of month.
		table save(demo table, working directory[]+"Table Distribute Out.csv");

		echo("return value = ", ret[] ); // True if all rows have been processed successfully (i.e. no skips and no values lost)

	    }		

	  }
	  echo(new line, "Test done.  Continue with menu");
	}
	while (selection[] != leave);

	interactive;

}