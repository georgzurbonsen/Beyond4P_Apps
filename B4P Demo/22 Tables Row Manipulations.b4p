{




    echo("Demonstration of table row manipulations", new line );

    table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,				Menu Selection		},
		  { 0,	"Table rows: Intro"				,	intro			},
		  { 1,	"Table rows: Delete rows"			,	delete rows		},
		  { 2,	"Table rows: Insert rows"			,	insert rows		},
		  { 3,	"Table rows: Rearrange rows"			,	rearrange rows		},
		  { 4,	"Table rows: Sort rows"				,	sort rows		},
		  { 5,	"Table rows: Rank rows"				,	rank rows		},

		  { M,	"Back to previous menu"					,	back		},
		  { I,	"Interactive (city and countries tables loaded)"	,	interactive	} } );

    do
    {



	echo( new line );
	selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );

	echo(new line, "Loading a small table 'Cities.csv' for this demonstration ...");
	table load( cities, "Cities.csv" );


 	switch( selection[])
	{


	    case(intro) // Simple introduction
	    {

		echo("Demonstrate some introductory features", new line);

		echo(new line, "Cities.csv: Number of rows: ", table length(cities), ", max. row width ", table max width(cities) );


		a[] = table check headers silently( cities, { City, Country, Inhabitants } ); 
		echo("    Check existing headers, result: ", a[]);
		a[] =  table check headers silently( cities, { City, Country, Inhabitants, Bla } ); // Add a non-existing column header and observe what's happening.
		echo("    Check existing and non-existing headers, result: ", a[]);

	    }

	    case(delete rows) // Delete rows
	    {
		echo("Demonstrate how rows are inserted", new line);

			
		table delete rows( cities, 1, 3 ); // Delete first 3 rows
		table delete selected rows( cities, [Country]=SWI ); // Delete all rows listing cities in Switzerland

		echo(new line, "Outcome after deleting first 3 rows and cities in Switzerland" );
		echo( [cities:,0] );
		table process( cities, echo([]) );

		echo(new line, "Keep all cities in the U.S." );
		table keep selected rows( cities, [Country]=USA );

		echo( [cities:,0] );
		table process( cities, echo([]) );
		
	    }


	    case(insert rows) // Insert rows
	    {
		echo("Demonstrate how rows are inserted and deleted", new line);

		table insert rows( cities, 1 );  // Insert 1 blank row below header.
		table insert selected rows( cities, [Inhabitants] < 1000000, 1, { City, Country }, Counter );  // Copy city and country into new rows and add counter column.


		echo(new line, "Outcome after inserting rows (Row 1 = blank, cities duplicated if < 1 Million inhabitants:" );
		echo( [cities:,0] );
		table process( cities, echo([]) );
		
	    }



	    case(rearrange rows) // Rearrange rows
	    {
		echo("Demonstrate how selected rows are rearranged", new line);

		echo(new line, "Move all cities < 1 million inhabitants to the top, and all US cities to the bottom" );
		table rearrange selected rows( cities, [Inhabitants]<1000000, top );
		table rearrange selected rows( cities, ([Country]=USA), bottom ); // Note country check in parentheses: Needed to avoid comparing 'bottom' with country, too.

		echo( [cities:,0] );
		table process( cities, echo([]) );
		
	    }


	    case(sort rows) // Sort rows
	    {
		echo("Demonstrate the table can be sorted", new line);

		echo(new line, "Country in descending order, inhabitants in ascending order" );
		table sort rows( cities, { Country, Inhabitants }, { alphabetic down, numeric } );

		echo( "City, Country, Inhabitants: " );
		table process( cities, echo([{City,Country,Inhabitants}]) ); // List relevant columns only:
		
	    }


	    case(rank rows) // Rank rows
	    {
		echo("Demonstrate the table can be ranked (rows are not moved!)", new line);

		echo(new line, "Rank by country in ascending order, use unique numbers" );
		table rank rows( cities, Rank, Country, alphabetic, 123 );

		echo( "Rank, City, Country: " );
		table process( cities, echo([{Rank,City,Country}]) ); // List relevant columns only:
		

		echo(new line, "Rank by country in ascending order, rank numbers may repeat " );
		table rank rows( cities, Rank, Country, alphabetic, 112 );

		echo( "Rank, City, Country: " );
		table process( cities, echo([{Rank,City,Country}]) ); // List relevant columns only:

	    }



	}
	echo(new line, "Test done.  Continue with menu");
    }
    while (selection[] <> interactive, back);

    if (selection[] = interactive) { interactive; exit; }


}