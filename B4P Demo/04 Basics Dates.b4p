{




    echo("Demonstration of some basic functionality with dates", new line );

    table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,				Menu Selection		},
		  { 0,	"Dates: Introduction"					,	intro		},
		  { 1,	"Dates: Operators"					,	date ops	},
		  { 2,	"Dates: Comparing them"					,	comparing	},
		  { 3,	"Dates: Input formats"					,	input format	},
		  { 4,	"Dates: Output formats"					,	output format	},
		  { 5,	"Dates: Some functions"					,	date funcs	},
		  { M,	"Back to previous menu"					,	back		},
		  { I,	"Interactive (city and countries tables loaded)"	,	interactive	} } );

    do
    {

	echo( new line );
	selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );

 	switch( selection[])
	{

	    case(intro) // Introduction
	    {
		echo("Demonstration of different ways of specifying dates and times, see following examples in the code.", new line);

		dim( a[], 14, 0, t[], 14, "" );	// Define two arrays

		a[ 0] = date( 15.01.2018 );		// No quotation markes needed if 2 points inside
		t[ 0] = "A date";

		a[ 1] = date( "Jan 15, 2018 ");
		t[ 1] = "Date in different format";

		a[ 2] = date( "10:30:00"   );		// But needed here since Beyond4P recognizes : as a language specific symbol
		t[ 2] = "Time specified";

		a[ 3] = date( "10:30:00 15.01.2018" );
		t[ 3] = "Time and date specified";

		a[ 4] = date( "15.01.2018 10:30" );
		t[ 4] = "Date and time specified";

		a[ 5] = pure date( a[4] );
		t[ 5] = "Pure date of above";

		a[ 6] = time( a[4] );
		t[ 6] = "Pure time of above";

		a[ 7] = date( "" );
		t[ 7] = "blank date";

		a[ 8] = date time( "" );
		t[ 8] = "Time of no date";

		a[ 9] = date( today );
		t[ 9] = "Today's date";

		a[10] = date( now );
		t[10] = "Today's date and present time";

		a[11] = date( 28.Month 2018 );
		t[11] = "End of prsent month";

		a[12] = date( 43146.25 );
		t[12] = "Microsoft date of 15.02.2018, 6:00 am";

		a[13] = date( 20170115 );
		t[13] = "Numeric date";

		for (i[]=0, i[]<member count(a[]), i[]++)
		{
		    echo("a[", i[], "] = ",a[i[]],"   ", t[i[]] ); 
		}


	    }


	    case(date ops) // Operators
	    {
		echo("Demonstration of binary operators applied on dates", new line);
		date1[] = input("Enter a date: ", date);

		num1[] = input("Enter a number of days (positive or negative): ", numeral );

		echo(new line, "Binary operators dates with numerals: ");
		echo("Addition               : ", date1[] + num1[] );
		echo("Subtraction            : ", date1[] - num1[] );


		echo(new line, "Binary operators dates with dates: ");
		echo("date - today = # days  : ", date1[] - date(today) );

		echo(new line, "Further operations combining date and time" );

		echo("Combining date and time              : ", date(today) + time("13:45" ) );
		echo("Adding time to date+time value       : ", date(now)   + time("1:00" )," (1 hour later)" ); 

		echo;
		echo("Adding time to time                  : ", time(now)   + time("1:00" )," (1 hour later)" ); 
		echo("Subtracting time from time decimal   : ", time(now)   - time("1:00" )," (1 hour earlier)" ); 
		echo("Subtracting time from time hours     : ", time(time(now) - time("1:00" ))," (time in hours)" ); 
		echo("Subtracting time from time hours     : ", time(now) - 1/24," (time in hours, same value)" ); 


		echo;
		echo(new line,"Assignment and ad-hoc operators on dates: ");

		echo(new line, "Date as entered: ", date1[] );
		date1[]+= 3;
		echo("Date after adding 3 days: ", date1[]);
		date1[]--;
		echo("Date after decremeting: ", date1[]);

		// Note: You cannot increment or decrement time-only values since the resulting value
		// is no longer in the 0-24h time range.  Error message would occur.


	    }


	    case(comparing) // Comparing dates
	    {

		echo("Demonstration of comparing dates", new line);

		date1[] = date("15.02.2018"); // Date only
		date2[] = date("16.02.2018"); // Date only

		date3[] = date("15.02.2018 12:00"); // Date and time
		date4[] = date("15.02.2018 13:00"); // Date and time
		time1[] = date("13:00");

		time2[] = date("12:00");

		echo(new line, "Comparing dates");
		echo(date1[], tab, " > ", tab, date2[], tab, " : ", date1[] > date2[] ); 
		echo(date1[], tab, " < ", tab, date2[], tab, " : ", date1[] < date2[] ); 

		echo(new line, "Only date compared when comparing date+time with date");
		echo(date1[], tab, " < ", tab, date3[], tab, " : ", date1[] < date3[] ); 
		echo(date1[], tab, " = ", tab, date3[], tab, " : ", date1[] = date3[] ); 
		echo(date1[], tab, " > ", tab, date3[], tab, " : ", date1[] > date3[] ); 

		echo(new line, "Comparing times");
		echo(time1[], tab, " > ", tab, time2[], tab, " : ", time1[] > time2[] ); 
		echo(time1[], tab, " < ", tab, time2[], tab, " : ", time1[] < time2[] ); 

		echo(new line, "Only time compared when comparing date+time with time");
		echo(date3[], tab, " < ", tab, time1[], tab, " : ", date3[] < time1[] ); 
		echo(date3[], tab, " = ", tab, time1[], tab, " : ", date3[] = time1[] ); 
		echo(date3[], tab, " > ", tab, time1[], tab, " : ", date3[] > time1[] ); 

		echo(date3[], tab, " < ", tab, time2[], tab, " : ", date3[] < time2[] ); 
		echo(date3[], tab, " = ", tab, time2[], tab, " : ", date3[] = time2[] ); 
		echo(date3[], tab, " > ", tab, time2[], tab, " : ", date3[] > time2[] ); 

		echo(new line, "Comparing both dates and time");
		echo(date3[], tab, " > ", tab, date4[], tab, " : ", date3[] > date4[] ); 
		echo(date3[], tab, " < ", tab, date4[], tab, " : ", date3[] < date4[] ); 

	    }


	    case(input format) // Input format
	    {

		echo("Demonstration of input format with 'date' function:", new line);

		echo("Note: Day+Month only dates may be interpreted differently depending on country settings");

		echo(new line, "Examples with dates only:");
		echo("3.05.18                 : ", date("3.05.18") );
		echo("3.5     (this year)     : ", date("3.5") );
		echo("2018-May-03             : ", date("2018-May-03") );
		echo("3. Mai 18               : ", date("3. Mai 18") );
		echo("May 3, 2018             : ", date("May 3, 2018") );
		echo("3-V-2018                : ", date("3-V-2018") );

		echo(new line, "Examples with dates and times:");
		echo("3.05.2018 15:10:00      : ", date( "3.05.2018 15:10:00" ) );
		echo("3.05.2018 3:10pm        : ", date( "3.05.2018 3:10pm" ) );
		echo("3.05.2018 15h10         : ", date( "3.05.2018 15h10" ) );


	    }

	    case(output format) // Output format with 'literal'
	    {
		
		echo("Demonstration of output format with 'literal' function:", new line);
		d[] = date(now); 

		echo("Use the present date and time: ", d[] );

		echo("D.M.YY                 : ", literal(d[],"D.M.YY" ) );
		echo("DD.MM.YYYY             : ", literal(d[],"DD.MM.YYYY" ) );
		echo("DD.Mmm.YYYY            : ", literal(d[],"DD.Mmm.YYYY" ) );
		echo("DD.MMM.YYYY            : ", literal(d[],"DD.MMM.YYYY" ) );
		echo("Mmmm/DD/YYYY           : ", literal(d[],"Mmmm/DD/YYYY" ) );
		echo("YYYY-MMMM-DD           : ", literal(d[],"YYYY-MMMM-DD" ) );
		echo("HH:II:SS               : ", literal(d[],"HH:II:SS" ) );
		echo("hh:II:SS aa            : ", literal(d[],"hh:II:SS aa" ) );
		echo("'Weekday: ' Ttt        : ", literal(d[],"'Weekday: ' Ttt" ) );
		echo("'Weeknum: ' Wwww       : ", literal(d[],"'Weeknum: ' Wwww" ) );
		echo("'Quarter: ' Q          : ", literal(d[],"'Quarter: ' Q" ) );
		echo("Tttt, DD.Mmmm (Italian): ", literal(d[],"Tttt, DD.Mmmm", italian ) );
		echo("Tttt, DD.Mmmm (local)  : ", literal(d[],"Tttt, DD.Mmmm", local ) );
		echo("YYYY-MM-DD HH:MM:SS    : ", literal(d[],"YYYY-MM-DD HH:MM:SS" ) );


	    }

	    case(date funcs) // Some functions
	    {

		echo("Demonstration of some function calls with numerals:", new line);

		today and now[] = date(now);	// Date and time
		now[] = time(now);		// Time only
		today[] = date(today);		// Date only


		echo("Today's date and time    : ", now[] );
		echo("today[]: date inside     : ", date inside( today[] ) );
		echo("today[]: time inside     : ", time inside( today[] ) );

		echo(new line, "Extracting valid details from dates and times:");

		echo("Year                     : ", year(today and now[]) );
		echo("Month                    : ", month(today and now[]) );
		echo("Day                      : ", day(today and now[]) );
		echo("Day of year (1-366)      : ", day of year(today and now[]) );
		echo("Hour                     : ", hour(today and now[]) );
		echo("Minute                   : ", minute(today and now[]) );
		echo("Second                   : ", second(today and now[]) );
		echo("Serial date              : ", serial date(today and now[]) );
		echo("Weekday                  : ", weekday(today and now[]) );
		echo("Calendar week number     : ", week(today and now[]) );

		echo(new line, "Attempting to extracting time details from dates and vice versa:");
		echo("Year from time = 0       : ", year(now[]), " (Same applies for other values like month, day)" );
		echo("Hour from date = -1      : ", hour(today[]), " (Same applies for minutes and seconds)" );

		echo;
		echo("Beyond4P provides a very powerful date manipulation function called 'reschedule'");
		echo("which can be applied on date and time - some examples:");
		echo("Tomorrow                   : ", reschedule( today[], 1, day ) );
		echo("End of this week           : ", reschedule( today[], end, week ) );
		echo("Begin of next week         : ", reschedule( today[], 7, days, begin, week ) );
		echo("Same day in previous month : ", reschedule( today[], previous, month ) );
		echo("End of this quarter        : ", reschedule( today[], end, quarter ) );
		echo("Begin of next quarter      : ", reschedule( today[], next, quarter, begin, quarter ) );
		echo("15th of this month         : ", reschedule( today[], day, 15 ) );

		echo;

		echo("Tomorrow (incl. time)      : ", reschedule( today and now[], 1, day ) );
		echo("Tomorrow (1 h later)       : ", reschedule( today and now[], 1, day, 1, hour ) );
		echo("Tomorrow (begin next hour) : ", reschedule( today and now[], 1, day, 1, hour, begin, hour ) );
		echo("Yesterday (15:30h)         : ", reschedule( today and now[],-1, day, time, "15:30" ) );


	    }



	}
	echo(new line, "Test done.  Continue with menu");
    }
    while (selection[] <> interactive, back);

    if (selection[] = interactive) { interactive; exit; }


}