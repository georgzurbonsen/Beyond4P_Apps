
{


	table initialize( countries,
	{	{ Abbreviation, Country Name, Language },
		{ GER, Germany, German },
		{ DAN, Danmark }, // Intentionally forgot language here
		{ ITA, Italy, Italian   },
		{ SPA, Spain, Castellino and Catalan   },
		{ USA, United States, English and Spanish },
		{ SWI, Switzerland, Various } } );


	table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,				Menu Selection		},
		  { 1,	"Cities: Demonstrate table lookup and table process"	,	cities 1	},
		  { 2,	"Cities: Demonstrate table consolidate"			,	cities 2	},
		  { 3,	"Cities: Demonstrate partial variable references"	,	cities 3	},
		  { 4,	"Cities: Demonstrate deep partial variable references"	,	cities 4	},
		  { 5,	"Cities: Provoke table deletion while in use"		,	cities 5	},
		  { 6,	"Cities: Spread inhabitants by countrues and consolidate",	cities 6	},
		  { 7,	"Cities: Copy 2 different cities table"			,	cities 7	},
		  { 8,	"Cities: Demonstrate 'table manipulate'"		,	cities 8	},
		  { 9,  "Cities: Demonstrate cartesian multiplication"		,	cities 9	},
		  { S,  "Cities: Demonstrate search functions"			,	search		},
		  { C,  "Cities: Demonstrate 'for all table columns' loop"	,	loop		},
		  { D,  "Cities: Demonstrate 'for all table selected columns' loop"	,	loop 2		},
		  { I,	"Interactive (city and countries tables loaded)"	,	leave		} } );

	do
	{

	  echo( new line );
	  selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );

	  table load( cities, working directory[] + "Cities.csv" );

  	  switch( selection[])
	  {
	    case(cities 1)
	    {

		echo(new line, "Lookup from countries list and identify million inhabitant cities", new line);

		table insert columns		( cities, { Language, Million inhabitants}, {"don't know",No}, Country );
		table lookup			( cities, Country, {Country, Language}, countries, Abbreviation, {Country Name, Language} );
	
		table process selected rows	( cities, [Inhabitants] >= 1000000, [Million inhabitants] = "Yes" );
		table save			( cities, working directory[] + "Cities Out.csv" );

	    }

	    case(cities 2)
	    {

		echo(new line, "Demonstrate consolidation function", new line);

		table load			( cities, working directory[] + "Cities.csv" );
		table consolidate 		( cities, Country, {Inhabitants, City}, {sum, append}, ", " );
		table keep columns		( cities, {Country,Inhabitants,City});
		table rename column headers	( cities, City, Cities listed);
		table save( cities, working directory[] + "Cities Out 2.csv" );
	    }

	    case(cities 3) // See also 'cities 4' below: It does the same task.
	    {

		echo(new line, "Demonstrate partial table references", new line);

		table copy table		(cities, c2 );
		table keep columns		( c2, Country );
		table consolidate		( c2, Country );
		table insert columns		( c2, Inhabitants, 0 ); // New blank column with inhabitants

		table process( c2,
		{
			country[] = [Country];
			total[] = 0;
			table process selected rows( cities, [Country]==country[], total[] += [Inhabitants] );
			[Inhabitants] = total[];
		} );


		table insert columns( cities, Country Inhabitants, 0, Inhabitants );
		table process( cities,
		{
			country[] = [Country];
			total[] = 0;
			table process selected rows( cities, [Country]==country[], total[] += [Inhabitants] );
			[Country Inhabitants] = total[];
		} );


		table save( cities, working directory[] + "Cities Out 3.csv" );
		table save( c2, working directory[] + "Cities Out 3a.csv" );
	    }


	    case(cities 4)
	    {

		echo(new line, "Demonstrate partial table references with deep operator", new line);

		table copy table		(cities, c2 );
		table keep columns		( c2, Country );
		table consolidate		( c2, Country );
		table insert columns		( c2, Inhabitants, 0 ); // New blank column with inhabitants

		table process			( c2, table process selected rows( cities, [^Country]==[Country], [^Inhabitants] += [Inhabitants] ) );

		table insert columns		( cities, Country Inhabitants, 0, Inhabitants );
		table process			( cities, table process selected rows( cities, [^Country]==[Country], [^Country Inhabitants] += [Inhabitants] ) );


		table save			( cities, working directory[] + "Cities Out 4.csv" );
		table save			( c2, working directory[] + "Cities Out 4a.csv" );
	    }


	    case(cities 5)
	    {

		echo(new line, "Provoke a controlled exception with deleting table while being used", new line);
	
		table process( cities, 
		{
			if ([City]==Vienna) { table delete(cities); pause; }
			echo([Country]);  // Will generate an exception message as planned
		} );
	
	    }

	    case(cities 6)
	    {

		echo(new line, "Spread the inhabitants by countries and consolidate", new line);

//		table insert columns		( cities, "SWI", "", 0);
//		table insert columns		( cities, "CAN", "", -1);
//		table spread given headers	( cities, Inhabitants, [Country], {USA,SWI,CAN,ITA}, Others, -1 );

		table spread			( cities, Inhabitants, [Country], true, -1, Others, -1);

		table save			( cities, working directory[] + "Cities Out 6.csv" );


		table consolidate		( cities, Country,  
						  { Inhabitants, AUT, CAN, DAN, FRA, ITA,	SWI, THA, USA, Others }, sum );


//		table consolidate( cities, Country, '*', append, ", " );

		table save( cities, working directory[] + "Cities Out 6a.csv" );
	
	    }


	    case(cities 7)
	    {
		echo(new line, "Demonstrate 'table copy' function.");

		table copy table		( cities, cities2 );


		echo( "Comparison result if same table compared: ", table compare( cities, cities, report ) );

		[cities2:City,New York City] 		= Big Apple;
		[cities2:City,Los Angeles,Moving along] = Motorcycle;
		table insert rows			( cities2, 5 );
		[cities2:,5] 				= { Cologne, NRW, GER, 1050000, Dome, 53, "Wallraf-Richartz Art Gallery" };		
		table delete rows			( cities2, [cities2:City,Bangkok] ); // The table reference retrieves a row number.


//		result[] = table compare		( cities2, cities, report ); // 1st table is seen as the more recent one

		result[] = table compare		( cities2, cities, report, City ); // Use City as orientation.  

		// In this case, "Big Apple" is an entirely new city and assumes row "New York City" begin deleted and
		// row "Big Apple" being inserted.



		echo( "Result returned from 'table compare' function: ", result[]);
		table save( report, working directory[] + "Cities Out 7a.csv" );

		table compare( cities2, cities, report, '', journal ); // NO orientation, but create a journal instead


		table save( report, working directory[] + "Cities Out 7b.csv" );


		// Let's use a function to show differences

		echo("Define the function 'show difference' ...");
		define function( show difference, { {old string, literal}, {new string, literal}, {column name, literal}, {row number, numeral} } )
		{
		   if (old string[] == new string[]) return ("...");
		   return("Old: " + old string[] + " &  New: " + new string[] );
		}
		echo("Function definition completed.");

		table compare( cities2, cities, report, '', entire table, show difference, true );
		table save( report, working directory[] + "Cities Out 7c.csv" );


	    }


	    case(cities 8)
	    {

		// You can also create a manipulating table with Excel, save as .CSV, load it in and use it.
		// The statements must not necessarily involve access to the tables, e.g. you can increment a 
		// counter variable or anything else you consider meaningful.
	
		table initialize( manipulations,
		{	{ My expression, 		My manipulation		 		},
			{ "[Country]==USA",		"['State / Province'] += ' (U.S.)'"	},
			{ "[Inhabitants] >= 1000000",	"[Inhabitants] = Megacity" 		},
			{ "[Moving along]==Car", 	"[Moving along] += ' or motorcycle'"	} } );

		table manipulate( cities, manipulations, 0,1 ); // For the fun of it I specified column numbers.
								// However, I recommend to use the column header
								// names since they make you independent from the
								// physical location of the columns.

		table save( cities, working directory[] + "Cities Out 8.csv" );

	    }


	    case (cities 9)
	    {
		table initialize( multiplier,
		{	{ Col 1,  Col 2 },
			{ Item A, Item B },
			{ Item C, Item D } } );

		table multiply( multiplier, cities, -1 );
		table save( cities, working directory[] + "Cities Out 9.csv" );


	    }



	    case (search)
	    {

		row[] = 1;
		col[] = 0;
		found[] = table search( cities, ('*a?i*'), row[], col[], 0, -1 ); // Contains a, followed by 1 character of choice, then by i, e.g. Taxi
		if (found[])
			echo(" search result: row = ", row[], "  col = ", col[], " containing: ", [cities:col[],row[]] );
		else:   echo(" search result: failed" );

		row[] = table search row( cities, [Country]==SWI, 1 );
		echo( "Row found is ", row[], " and city is ", [cities:City,row[]] );


	    }


	    case (loop)
	    {

		echo("Test the 'for all table columns' loop");
		for all table columns( cities, 1, contents[], index[] )
		{
			echo( "Index: ", index[], " Contents: ", contents[], "  City in row: ", [City] );
		}
		echo(new line, "Now try this inside 'table process'");
		table process( cities,
		{
			for all current table columns( contents[] ) print( contents[], ", " );
			echo;
		} );

	    }


	    case (loop 2)
	    {

		echo("Test the 'for all table selected columns' loop");
		for all table selected columns( cities, ('C*'), 1, col[] , header[], index[] )
		{
			echo( "Index: ", index[], "  Header: ", header[], "  Col Nr: ", col[], " City in row: ", [City] );
		}

		echo(new line, "Now try this inside 'table process'");
		table process( cities,
		{
			for all current table selected columns( ('C*'), col[], header[], index[] ) 
			{
				echo( "Index: ", index[], "  Column Nr: ", col[], "  Header: ", header[], "  Value: ", [col[]], "   " );
			}			
			echo;
		} );

	    }



	  }
	  echo(new line, "Test done.  Continue with menu");
	}
	while (selection[] != leave);

	interactive;

}