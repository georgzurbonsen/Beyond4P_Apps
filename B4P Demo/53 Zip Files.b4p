
include( Zip Library );

{

    echo("Demonstration of ZIP file operations", new line );

    table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,					Menu Selection		},
		  { 1,	"Extract a file from a compressed ZIP archive"		,	extract			},
		  { 2,	"Extract a whole archive into a subdirectory"		,	extract all		},
		  { 3,	"Compress a file into an archive"			,	compress file		},
		  { 4,	"Compress a directory into an archive"			,	compress directory	},
		  { M,	"Back to previous menu"					,	back			},
		  { I,	"Interactive (city and countries tables loaded)"	,	interactive	} } );


    do
    {

	echo( new line );
	selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );


 	check( selection[])
	{
	    case(extract)
	    {
		echo("Extract an XML file from Excel: docProps\core.xml");
		zip extract files( "Cities.xlsx", {"docProps\core.xml","docProps\app.xml"}, "Target" );
		pause("Take a look at the file '.\Target\core.xml and app.xml'");
		directory delete recursive ( Target );

	    }

	    case(extract all)
	    {
		echo("Extract the whole archive: Cities.xlsx -> Towns\...");
		zip extract all( "Cities.xlsx", Towns );

		pause("Take a look at the directory '.\Towns'");
		directory delete recursive ( Towns);
	    }

	    case(compress file)
	    {
		echo("Compress the file : Main.b4p -> Main.zip");
		zip compress( "Main.b4p" );
		pause("Take a look at the file 'Main.zip'");
		file delete( Main.zip );
	    }

	    case(compress directory)
	    {
		directory create ("Zip Test");
		file copy multiple( "./", "Zip Test", "*.b4p" );
		echo("Compress the directory 'Zip Test' -> 'Zip Test.zip'");
		zip compress( "Zip Test", Zip Test.zip );  // Re-test on windows if wildcard is required

		pause("Take a look at the directory 'Zip Test' and 'Zip Test.zip'");

		directory delete recursive ("Zip Test");
		file delete( Zip Test.zip );
	    }



	}
	echo(new line, "Test done.  Continue with menu");
    }
    while (selection[] <> interactive, back);

    if (selection[] = interactive) { interactive; exit; }


}