{


    echo("Demonstration of table columns manipulations", new line );

    table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,				Menu Selection		},
		  { 0,	"Table columns: Intro"				,	intro			},
		  { 1,	"Table columns: Insert columns"			,	insert columns		},
		  { 2,	"Table columns: Delete columns"			,	delete columns		},
		  { 3,	"Table columns: Copy columns"			,	copy columns		},
		  { 4,	"Table columns: Rearrange and keep columns"	,	keep columns		},
		  { 5,	"Table columns: Sort columns"			,	sort columns		},

		  { M,	"Back to previous menu"					,	back		},
		  { I,	"Interactive (city and countries tables loaded)"	,	interactive	} } );

    do
    {



	echo( new line );
	selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );

	echo(new line, "Loading a small table 'Cities.csv' for this demonstration ...");
	table load( cities, "Cities.csv" );


 	switch( selection[])
	{


	    case(intro) // Simple introduction
	    {

		echo("Demonstrate some introductory features", new line);

		echo(new line, "Cities.csv: Number of rows: ", table length(cities), ", max. row width ", table max width(cities) );


		a[] = table check headers silently( cities, { City, Country, Inhabitants } ); 
		echo("    Check existing headers, result: ", a[]);
		a[] =  table check headers silently( cities, { City, Country, Inhabitants, Bla } ); // Add a non-existing column header and observe what's happening.
		echo("    Check existing and non-existing headers, result: ", a[]);

	    }

	    case(insert columns) // Insert columns
	    {
		echo("Demonstrate how columns are inserted", new line);

		echo("Insert a column");
		table insert columns( cities, Beverage, Tap Water, Inhabitants );

		echo(new line, "Beverage (tap water) added to every city before 'Inhabitants'", new line);

		echo( [cities:,0] );
		table process( cities, echo([]) );

		echo(new line, "Insert some missing columns, e.g. street and ZIP code", new line);
		table insert missing columns( cities, { City, Street, Country, ZIP Code }, "--" );

		echo( [cities:,0] );
		table process( cities, echo([]) );

	    }



	    case(delete columns) // Delete columns
	    {
		echo("Demonstrate how columns are deleted", new line);

		echo(new line, "Delete Altitude, Country, Inhabitants and last column 'Moving along'");
		table delete columns( cities, { 5, Country, Inhabitants, -1 });

		echo( [cities:,0] );
		table process( cities, echo([]) );

		echo(new line, "Delete remaining columns including country and beyond");
		table delete remaining columns( cities, Famous attraction );

		echo( [cities:,0] );
		table process( cities, echo([]) );

	    }



	    case(copy columns) // Copy columns
	    {
		echo("Demonstrate how columns are copied", new line);

		echo(new line, "Insert a column and duplicate all city names of U.S. cities");
		table copy columns selected rows( cities, ([Country]=USA), City, U.S. City );

		echo( [cities:{Country,City,U.S. City},0] );
		table process( cities, echo([{Country,City,U.S. City}]) );
		
	    }



	    case(keep columns) // Rearrange and keep columns
	    {
		echo("Demonstrate how columns are rearranged and kept", new line);

		echo(new line, "Move Famous attraction and cultural place to the left, rest moves rightwards");
		table rearrange columns( cities, {Famous attraction, Famous cultural place} );

		echo( [cities:,0] );
		table process( cities, echo([]) );

		echo(new line, "Only keep city, country, famous attraction and cultural place, forget the rest");
		table keep columns( cities, {City,Country,Famous attraction, Famous cultural place} );

		echo( [cities:,0] );
		table process( cities, echo([]) );

	    }




	    case(sort columns) // Sort columns

	    {
		echo("Demonstrate the table columns can be sorted", new line);

		echo(new line, "All headers except city in alphabetic order" );
		table sort columns ( cities, 1, -1, alphabetic );

		echo([cities:,0]);
		table process selected rows( cities, {1..3}, echo([]) ); // List header rows and rows below.
		
	    }





	}
	echo(new line, "Test done.  Continue with menu");
    }
    while (selection[] <> interactive, back);

    if (selection[] = interactive) { interactive; exit; }


}