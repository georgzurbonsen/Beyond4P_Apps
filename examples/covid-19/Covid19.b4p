#!/usr/local/bin/b4p

include ( Style Library );

runtime settings[verbose] 			= quiet;
local settings[date format] 			= "MM/DD/YYYY";
local settings[date separator] 			= "/";

CH cantons[] = { AG, AI, AR,  BE, BL, BS,  FR, GE, GL,  GR, JU, LU,  NE, NW, OW,  SG, SH, SO,  SZ, TG, TI,  UR, VD, VS,  ZG, ZH };


CH file name[] 			= "./inputs/time_series_covid19_Switzerland_XX.csv";
US file name[] 			= "./inputs/US_states_daily.csv";

World file name[Confirmed]	= "./inputs/time_series_covid19_Confirmed_global.csv";
World file name[Deaths]		= "./inputs/time_series_covid19_Deaths_global.csv";


country specific headers[] = { "Country/Region", Population, Area };


// COVID 19 Analyzer

// Note: All tables in B4P are global.  If you wish to use a local table inside a function, then create one with unique name
// and delete it after leaving the function.


//
//	The functions below fetch the raw data from the Internet, load then and put them into aligned tables: Confirmed, Hopitalized, Deaths
//	____________________________________________________________________________________________________________________________________________
//


define procedure ( download covid 19 data )
{
	CH url  name[] 		= "https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv/COVID19_Fallzahlen_Kanton_XX_total.csv"; // XX = Placeholder for Kanton

	directory create all 	( inputs ); // create a subdirectory if not yet existing.

	if (input quick ignore case("Download the latest raw data from the Web? [NY]", NY )=Y)
	{	
		echo("Download country data worldwide from github (John Hopikins University)");
		file download overwrite( "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", "./inputs/time_series_covid19_Confirmed_global.csv" );
		file download overwrite( "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", "./inputs/time_series_covid19_Deaths_global.csv" );

		echo("Load state date in the USA");
		file download overwrite( "https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/master/data/states_daily_4pm_et.csv", US file name[] );

		echo("Load canton data in Switzerland (BAG)");
		for all parameters( CH cantons[], canton[] )
		{
		    echo("    Download canton ", canton[] );
		    file download overwrite( replace( CH url name[], XX, canton[] ), replace( CH file name[], XX, canton[] ) );
		}
	}
}



define procedure( table create template, {{ table names, parameters}} )
{
	for all parameters( table names[], table name[] )
	    table initialize( table name[], {{"Country/Region", Population, Area, Blank 1..Blank 4, Comments }} );
}


define procedure( load the USA )
{
	echo(new line, "Load the USA:");
	echo( "Load data from all states in the USA and keep the ones selected ...");

	table load			( US table, US file name[] );

	table process			( US table, [state] = "US " + [state] );
	table lookup ignore case	( US table, state, country specific headers[] + {Favorites}, Country Data, "Search Country/Region", { "Use Country/Region", Population, Area, Favorites } );

	if (favor[] != ' ')
	    table keep selected rows	( US table, find([Favorites], favor[]) >= 0 );

	table rename headers		( US table, { date, positive, hospitalizedCurrently, death }, { Date, Confirmed, Hospitalized, Deaths } );
	table keep columns		( US table, country specific headers[] + { Date, Confirmed, Hospitalized, Deaths } );
	table process			( US table, [Date] = date([Date]) ); // Proper date format

	for all parameters( { Confirmed, Hospitalized, Deaths }, parameter[] )
	{
	    table copy table		( US table, US table copy );
	    table keep columns		( US table copy, {Date} + country specific headers[] + {parameter[]} );
	    table spread		( US table copy, parameter[], [Date] );
	    date headers[]		= [ US table copy: :'####-##-##', 0 ];
	    table consolidate		( US table copy, "Country/Region", { Date, parameter[] } + date headers[], { 2:delete, sum } );

	    table merge extend columns	( US table copy, parameter[] );
	}
}


define procedure( load the World )
{
	echo(new line, "Load the World:");
	for all parameters( { Confirmed, Deaths }, parameter[] )
	{
	    echo( "Load data from countries and keep the ones selected (", parameter[], ") ...");

	    table load				( World table, World file name[parameter[]] );

	    // Clean up dates.  They are in M/D/Y format.
	    table process selected columns	( World table, 0, ([.]='*/*/*'),
							mdy[] = tokenize( [.], read numerals, "/");
							[.] = date( mdy[]{2}+2000, mdy[]{0}, mdy[]{1} ) );

	    // Clean up countries
	    table consolidate selected rows	( World table, (["Country/Region"]=Australia,Canada,China), "Country/Region", {"Province/State"} +  [World table: :'####-##-##', 0], {blank, sum} );
	    table process selected rows		( World table, ["Province/State"]!='', ["Country/Region"] = ["Province/State"] );
	    table keep columns			( World table, {"Country/Region"} + [World table: :'####-##-##', 0] );

	    table lookup smart ignore case	( World table, "Country/Region", country specific headers[] + {Favorites}, Country Data, "Search Country/Region", { "Use Country/Region", Population, Area, Favorites } );

	    echo("    Ignoring: ", [World table:Population,:'', "Country/Region" ]);
	    table delete selected rows		( World table, [Population]='' ); // Ignore any other country
	    if (favor[] != ' ')
	        table keep selected rows	( World table, find([Favorites], favor[]) >= 0 );

	    table delete columns		( World table, Favorites );
	    table merge extend columns		( World table, parameter[] );
	}
}

define procedure( load Switzerland )
{
	echo(new line, "Load Switzerland:");
	for all parameters( CH cantons[], canton[] )
	{
	    country canton[] = "CH " + canton[];
	    if ( favor[]=' ' | find( [Country Data: "Search Country/Region", country canton[], Favorites], favor[]) >= 0 )
	    {
		echo("    Load canton ", canton[] );

		table load( CH table, replace( CH file name[], XX, canton[] ), ',');
		table process			( CH table, [date] = date([date]) ); // Ensure proper date format (is actually YYYY-MM-DD, but be prepared to handle varying formats)
		table process			( CH table, [abbreviation_canton_and_fl] = country canton[] );
		table lookup ignore case		( CH table, abbreviation_canton_and_fl, country specific headers[] + {Favorites}, Country Data, "Search Country/Region", { "Use Country/Region", Population, Area, Favorites } );

		table rename headers		( CH table, { date, ncumul_conf	, ncumul_hosp, ncumul_deceased }, { Date, Confirmed, Hospitalized, Deaths } );
		table keep columns		( CH table, country specific headers[] + { Date, Confirmed, Hospitalized, Deaths } );


		for all parameters( { Confirmed, Hospitalized, Deaths }, parameter[] )
		{
		    table copy table		( CH table, CH table copy );
		    table keep columns		( CH table copy, {Date} + country specific headers[] + {parameter[]} );
		    table spread		( CH table copy, parameter[], [Date] );
		    date headers[]		= [ CH table copy: :'####-##-##', 0 ];
		    table consolidate		( CH table copy, "Country/Region", { Date, parameter[] } + date headers[], { 2:delete, sum } );
		    table merge extend columns	( CH table copy, parameter[] );
		}
	    }
	}
}




//
//	Data Preparations
//	____________________________________________________________________________________________________________________________________________
//


define procedure( calculate max and incidences, { { data, string }, { do pct of confirmed cases, boolean } } )
{
	echo(new line, "Calculate maximm value and incidences for ", data[]);
	forget memorized table columns;
	table correct headers	( data[], { Blank 1, Blank 2 }, { Maximum, "Per 100,000 inh." } );

	dates[]			= [data[]::'####-##-##',0];
	table process(		data[],
					if (function name[] == calculate latest and incidences)
					{
						subset[] = filter( [ dates[] ], <>'' );
						[Maximum] = pick if( subset[]{}==0, 0, subset[]{-1} ); // Pick last element if available (not blank)
					}
					else
					{
						[Maximum] = max 123( [ dates[] ] );
					}
					["Per 100,000 inh."] = pick if ( [Population]>0, [Maximum] / [Population] * 100000, 0 ) );

	if (do pct of confirmed cases[])
	{
		table rename column headers	( data[], Blank 3, "% Confirmed" );
		table process selected rows	( data[], [Confirmed:Maximum]!=0, ["% Confirmed"] = [Maximum] / [Confirmed:Maximum] );
	}

	if (function name[] == calculate latest and incidences) table rename column headers( data[], Maximum, Latest );
}

define additional procedure( calculate latest and incidences, calculate max and incidences, { { data, string }, { do pct of confirmed cases, boolean } } );




// Various tables contain reporting gaps and need to be filled up
// Step 1: Number stays equal if there is a reporting gap (0 or blank)
// Step 2: Above a certain level, start interpolating because value may have changed constant followed by a jump after a reporitng pause.

define procedure ( interpolate gaps , {{ data, string }} )
{
	echo(new line, "Interpolate data gaps in ", data[], " ..." );

	dates[] 			= [data[]::'####-##-##',0];
	1st column[]			= table column number( data[], dates[]{0} );
	x axis[] 			= { 0 .. dates[]{}-1 };	// 0, 1, 2, ... (# elements equals # dates)

	table process( data[], 
	{
		x coord[] = { 0 };				// 1st point (0, y1)
		y coord[] = { num( [1st column[]] ) };	// Ensures blanks are treated as zero

		table process selected columns( data[], row(), col() > 1st column[], 
			if ([.] < ['<.']) [.] = ['<.'];
			delta[] = [.] - ['<.'];
			if ( (delta[] > 0) | ([.] <= 50) )	// Small numbers: No extrapolation.
			{
			    x coord[] += { col() - 1st column[] };
			    y coord[] += { [.] };
			} );
		
		if (x coord[]{} > 2)
		    [ 1st column[].. ] = linear interpolation( x axis[]{0.. x coord[]{-1}}, x coord[], y coord[] ); // Overwrite row with interpolated data

		table process selected columns( data[], row(), col() > 1st column[], [.] = round([.], 1 ) );
	} );
}




//
//	Recoveries: Assuming average sick time of 14 days, unfortunately reduced by the number of deceased persons
//	____________________________________________________________________________________________________________________________________________
//


define procedure( calculate recoveries )
{
	echo(new line, "Calculate recoveries ..." );
	lag[] = 14;				// Assume healthy after 14 days if no casuality happend.

	data[] = 'Recovered Predicted';
	table copy table			( 'Confirmed', data[] );
	dates[] 				=  [data[]::'####-##-##',0];

	[data[]: dates[]{lag[].. -1},..] 	= [data[]: dates[]{0..-1-lag[]},..];	// Right-shift copy by # lag days
	[data[]: dates[]{0..lag[]-1},..] 	= 0;					// And set first # lag days to 0

	[data[]: dates[],..] 			-^^= [Deaths: dates[],..];		// Subtract casualities

	calculate max and incidences( Recovered Predicted, true );
}



define procedure ( calculate actively infected )
{
	echo(new line, "Calculate actively infected ..." );

	table copy table			( Confirmed, Actively Infected );
	dates[] 				= [Confirmed::'####-##-##',0];
	[ Actively Infected: dates[], ..] 	-^^= [ Deaths: dates[], .. ] +^^ [ Recovered Predicted: dates[], .. ];

	calculate latest and incidences ( Actively Infected, true );
}



define procedure ( daily new, {{ data, string }, { new, string}} )
{
	echo(new line, "Calculate daily new cases for ", data[], " ..." );
	forget memorized table columns;

	table copy table			(  data[], new[] );
	dates[] 				= [data[]::'####-##-##',0];
	1st column[]				= table column number( new[], dates[]{0} );
	last column[] 				= table column number( new[], dates[]{-1} );

	table process ( new[], [ 1st column[]+1 .. last column[] ] -^= [ 1st column[] .. last column[]-1 ] );

}




define procedure ( weekly per 100k inh, {{ data, string }, {new, string}} )
{
	echo(new line, "Calculate weekly incidence rate ..." );
	forget memorized table columns;

	span[]-- = 7;

	table copy table			(  data[], new[] );
	dates[] 				= [data[]::'####-##-##',0];
	1st column[]				= table column number( new[], dates[]{0} );
	last column[] 				= table column number( new[], dates[]{-1} );
	start column[] 				= table column number( new[], dates[]{0} ) + span[];

	table rename headers( new[], "Per 100,000 inh.", "Latest" );
	[ new[]: { Maximum, Latest }, .. ] = 0;

	table process ( new[], 
		for (col[] = last column[], col[] >= start column[], col[]-- )
		{
			[col[]] 			= sum( [ col[]-span[] .. col[] ] ) / ([Population] / 100000);
			if ([Latest]==0) 		[Latest] = [col[]];
			if ([col[]] > [Maximum])	[Maximum]= [col[]];
		}
		[ 1st column[] .. 1st column[]+span[] ] = 0; );

}




define procedure ( day 0 alignment, {{ data, string }} )
{
	echo(new line, "Calculate day 0 alignment ..." );

	forget memorized table columns;

	threshold[] = 30;			// 1st day is day with minimum 10 confirmed cases

	new[] = data[] + " Day Zero";
	table copy table columns		(  data[], new[], [data[]:..Comments,0] );
	table rename column headers		(  new[], Blank 3, '% CDGR');

	dates[]					= [data[]::'####-##-##',0];
	[new[]:'>Comments'..,0]			= "Day " +^ deep( str, {{ 1 .. dates[]{} }} );

	table process( new[],  			series[] 	= filter start include( [ data[]:dates[],row() ], >=threshold[] );
						['% CDGR'] 	= cagr( series[] );
						[Day 1..] 	= series[]; );

}





define procedure ( trend cases, {{ data, string }} )
{
	echo(new line, "Calculate trend cases on ", data[], " ...");
	forget memorized table columns;

	span[]-- = 7;				// Running average over 7 days
	days[]-- = 3;				// Calculate CAGR from two 3-days average at start and end

	new[] = data[] + " Trend";
	table copy table			(  data[], new[] );
	dates[] 				= [data[]::'####-##-##',0];
	1st column[]				= table column number( new[], dates[]{0} );
	last column[] 				= table column number( new[], dates[]{-1} );
	start column[] 				= table column number( new[], dates[]{0} ) + span[];

	table process ( new[], for (col[] = last column[], col[] >= start column[], col[]-- )
	{
		if ( ( product( [ col[]-span[] .. col[]-span[]+days[] ] ) <> 0) & ( [ col[]-span[] ] >= 10 ) )  // Calculate if left side contains at least 10 cases, otherwise chart is messy
		{
		    [col[]] = cagr( [ col[]-span[] .. col[] ], days[]+1 );
		}
		else
		{
		    [col[]] = "";
		}
	} );

	table process ( new[], [ 1st column[] .. start column[]-1 ] = "" );

	[ new[]: 'Maximum'.., 0 ] = { '% Max', '% Min', '% Latest', '% Last Day' }; // Overwrites headers "Per 100,000 inh.", Blank 3 and Blank 4.

	table process selected rows		( new[],  [data[]:last column[]] > 50 & product( [ data[]:last column[]-1 .. last column[] ] ) != 0, ['% Last Day'] = [data[]:last column[]] / [data[]:last column[]-1]-1 );
	table process				( new[],  ['% Max'] = max 123 ( [dates[]] ); ['% Min'] = min 123 ignore zero( [dates[]] ); ['% Latest'] = [dates[]]{-1} );

}


define procedure( trend cases based on active infections )
{
	echo(new line, "Calculate trend case based on active infections");

	table copy table			( Confirmed Trend, Actively Infected Trend );
	dates[] 				= [Confirmed::'####-##-##',0];

	1st column[]				= table column number( Confirmed Trend, dates[]{0} );
	last column[] 				= table column number( Confirmed Trend, dates[]{-1} );

	table process ( Actively Infected Trend, for (col[] = 1st column[], col[] <= last column[], col[]++ )
	{
		[col[]] *= pick if ( [Actively Infected:col[]] != 0, [Confirmed:col[]] / [Actively Infected:col[]], 0 );
	} );

	table process selected rows		( Actively Infected Trend,  [Confirmed:last column[]] > 50 & product( [ Confirmed:last column[]-1 .. last column[] ] ) != 0, ['% Last Day'] = [Confirmed:last column[]] / [Confirmed:last column[]-1]-1 );
	table process				( Actively Infected Trend,  ['% Max'] = max 123 ( [dates[]] ); ['% Min'] = min 123 ignore zero( [dates[]] ); ['% Latest'] = [dates[]]{-1} );
}



define procedure ( calculate adjusted case fatality risk )
{
	echo(new line, "Calculate adjusted case fatality risk (aCFR) ...");
	aCFR lag[]-- = 7;			// # Adjusted Case Fatality Risk - One comparison: Compare # deaths with cases 7 days earlier
	table rename column headers		( Deaths, Blank 4, '% aCFR' );
	dates[] 				= [Deaths   ::'####-##-##',0];

	table process selected rows		( Deaths, ([Confirmed: dates[]{-1-aCFR lag[]} ] > 0), ['% aCFR' ] = [dates[]{-1} ] / [Confirmed: dates[]{-1-aCFR lag[]} ] );
}






//
//	Main Program
//	____________________________________________________________________________________________________________________________________________
//

{
	watch start;
	download covid 19 data;


	table load excel file 			( Country Data, "Country Data.xlsx", Basedata );
	table process 				( Country Data, [Population] = clean num( [Population] ) ); // Remove 1,000 separators, especially the non-ANSI character on HP systems in Switzerland
	data sets[] 				= { Confirmed, Hospitalized, Deaths };

	echo("In the 'Population Data', you can specify different choice patterns using capital letters", new line, "in order to focus on countries of choice.  Enter choice:");

	echo("Downloading time (s): ", watch reset()/1000 ); // Watch continues running

	favor[]   = input quick ignore case("[space bar] = All favorites, Letter = Favorite as listed with that letter", " ABCDEFGHIJKLMNOPQRSTUVWXYZ" );

	watch reset; // Reset after input.

	table create template( { Confirmed, Hospitalized, Deaths } );

	load Switzerland;
	load the World;
	load the USA;


	columns union set[] = [ Confirmed: .., 0] | [ Deaths: .., 0];

	for all parameters( { Confirmed, Hospitalized, Deaths }, table[] )
	{
	    table insert missing columns	( table[], columns union set[] );	// Ensure both tables contain same set of dates
	    table sort columns			( table[], '>Comments', -1, date );	// Ensure dates in right order
	    table sort rows			( table[], "Country/Region" );
	    calculate max and incidences	( table[], table[] != Confirmed );
	    table process cells in columns	( table[], [ table[] : :'####-##-##', 0 ], [.] = num([.] ) ); // Force all blank values to zero
	}

	interpolate gaps ( Confirmed );
	interpolate gaps ( Deaths );
	
	calculate recoveries;
	calculate actively infected;
	daily new ( Confirmed, Confirmed Daily New );
	weekly per 100k inh ( Confirmed Daily New, Confirmed Weekly per 100k Inh ); 

	trend cases ( Confirmed );
	trend cases based on active infections();
	calculate adjusted case fatality risk;
	day 0 alignment( Confirmed );


	// Before saving the work: Do some formatting

	tables[] = { Confirmed, Confirmed Daily New, Confirmed Weekly per 100k Inh, Confirmed Day Zero, Confirmed Trend, Recovered Predicted, Hospitalized, Deaths, Actively Infected, Actively Infected Trend };

	my time stamp[]	= str( date(today), "YYYY-MM-DD" );
	dir name[]	= "./" + my time stamp[] + "_Results/";

	directory create all ( dir name[] );

	echo("Apply formatting and style");
	for all parameters( tables[], table[] )
	{
		table style theme		( table[], Zebra, pattern, 2 );
		table style table 		( table[], sheet, autofilter, 0, freeze rows, 1, freeze columns, 2 );
		table style columns		( table[], { "Country/Region", Population, Comments }, sheet, column width, 20 );
		table style columns		( table[], [table[]::'####-##-##',0] + [table[]::'Day &',0], sheet, number format, select if ( (table[]='*Trend*'), "0.00%", "#,##0")  );
		table style columns		( table[], [table[]::'Minimum,Maximum,Population,Area,Latest',0], sheet, number format, "#,##0"  );
		table style columns		( table[], [table[]::'*inh*',0], sheet, number format, "0.000"  );
		table style columns		( table[], [table[]::'%*',0] , sheet, number format, "0.00%"  );
		print("Translate style attributes for ", table[], "... " );
		translate style attributes for excel ( table[] ); 		// Modern EXCEL XLSX 2013+
//		translate style attributes for excel xml 2003 ( table[] );	// Legacy EXCEL XML 2003
		echo("  Done.");

		table save			( table[], dir name[] + my time stamp[] + "_" + table[] + ".csv" );	// Individual tables without formatting
	}

	// Save the combined data including the styles applied

	echo("Starting to save Excel (Implemented conservatively, please be patient (ca 1 min for 50 countries or states)...");

	echo("Processing time (s): ", watch reset()/1000 ); // Watch continues running

	table save excel file			( tables[], tables[], dir name[] + my time stamp[] + "_Results.xlsx"  );         // Modern EXCEL XLSX 2013+
//	table save multiple			( tables[], tables[], dir name[] + my time stamp[] + "_Results.xls", EXCEL  );   // Legacy EXCEL XML 2003
	echo("Done saving.  It took ", watch stop()/1000, " seconds.");
}


