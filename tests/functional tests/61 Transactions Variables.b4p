{


    echo("Demonstration of transactions on variables", new line );

    table initialize ( sub  menu,
		{ { Menu Choice,Menu Explanation,					Menu Selection		},
		  { 0,	"Intro: Simple transaction with animals passed around"	,	intro			},
		  { 1,	"Transaction with multi level nested variables"		,	families		},
		  { 2,	"Assignment operators"					,	operators		},
		  { 3,	"Transactions on arrays"				,	arrays			},
		  { 4,	"Transactions mixed arrays and structuers to array"	,	mixed to array		},
		  { 5,	"Transactions mixed arrays and structuers to struct."	,	mixed to structure	},

		  { M,	"Back to previous menu"					,	back		},
		  { I,	"Interactive (city and countries tables loaded)"	,	interactive	} } );

    do
    {

	echo( new line );
	selection[] = table menu quick( sub menu, Menu Choice, Menu Explanation, Menu Selection );

	delete( parent[], additions[] );	

	family 1[] = Kaufmann; // Last Name
	family 1[mother] = Tanja;
	family 1[son 1] = Colin;
	family 1[daughter 1] = Linda;
	family 1[daughter 1, granddaughter 1] = Corinne;
	family 1[son 2] = Nick;
	family 1[son 2, grandson 1] = Leo;
	family 1[son 2, grandson 2] = Tim;
	family 1[son 2, granddaughter 1] = Lisa;

	family 2[father] = Thomas;
	family 2[daughter] = Lara;

	girlfriend[] = Lena;
	girlfriend[her cat] = Leonie;

	additions[daughter in law 1] = Caroline;
	additions[son in law 1] = Jim;
	additions[daughter in law 2] = Nellie;
	additions[son 2, granddaughter 2] = Tina;
	additions[son 2] = Nic; // Overwrite

 	switch( selection[])
	{
	
	    case(intro) // Simple introduction
	    {

		echo("Begin with some animals belonging to Mike:");
		
		structure( animals1[], { mammal, bird, fish }, { dog, duck, trout } );
		animals1[] = Mikes animals;
		a[] <==  animals1[];
		b[] <==^ animals1[];

		echo( "a[] = ", a[], ", member names: ", set names( a[] ), " contents: ", set ( b[] ));
		echo( "b[] = ", b[], ", member names: ", set names( b[] ), " contents: ", set ( b[] ));

		pause("Note that value in b[] invalid because only the members are copied");

		structure( a[], { mammal, bird, fish }, { dog, duck, trout } );
		a[] = Mike;
		structure( b[], { bird, reptile, fish }, { swallow, crocodile, shark } );
		b[] = Jane;

		a[] <=> b[]; // The two owners just change position, but keep their pets.

		echo( "a[] = ", a[], " member names: ", set names( a[] ), " contents: ", set ( a[] ));
		echo( "b[] = ", b[], " member names: ", set names( b[] ), " contents: ", set ( b[] ));

		pause("The owners changed their positions in the variable, but keep their animals");


		echo(new line, "Jane and Mike exchange their pets ...");
		a[] <=>^ b[];

		echo( "a[] = ", a[], " member names: ", set names( a[] ), " contents: ", set ( a[] ));
		echo( "b[] = ", b[], " member names: ", set names( b[] ), " contents: ", set ( b[] ));

		pause("Do you see that Jane and Mike have exchanged their animals?");

		echo(new line, "Jane gives all animals to Nick");

		c[] = "Nick";
		c[] <<=^ a[]; // But Jane inside base variable stays inside
		d[] = "Dave";
		d[reptile] <<= b[reptile];

		echo( "a[] = ", a[], " member names: ", set names( a[] ), " contents: ", set ( a[] ));
		echo( "b[] = ", b[], " member names: ", set names( b[] ), " contents: ", set ( b[] ));
		echo( "c[] = ", c[], " member names: ", set names( c[] ), " contents: ", set ( c[] ));
		echo( "d[] = ", d[], " member names: ", set names( d[] ), " contents: ", set ( d[] ));

		pause("Check that Nick got all animals from Jane and Dave received Mike's crocodile.");

	    }

	    case(families) // Test with nested variables (family members)
	    {

		echo("Make a copy of family 1 to family 2");
		family 2[] <== family 1[];

		inspect(family 2[]);
		pause("family 2[] contains same contents as family 1[]");


		echo("Add Nick's girlfriend");
		family 2[son 2, girlfriend] <== girlfriend[];
		
		inspect(family 2[]);
		pause("Check Nick's girlfriend");


		echo("The cat is handed to Tim, the granddaughter");
		family 2[son 2, grandson 2, cat] <<= family 2[son 2, girlfriend, her cat];	

		inspect(family 2[]);
		pause("Check if the cat belongs to Tim.");


		echo("Exchange the grandchildren between Linda and Nick");
		family 2[daughter 1] <=>^ family 2[son 2]; // Note: The circumflex limits exchange to their children only.

		inspect(family 2[]);
		pause("Check that Leo, Tim and Lisa belong to Linda and Corinne belongs to Nick.");

	    }



	    case(operators) // Combine two variable trees
	    {

		echo("Combine two variables with their members");

		structure( a[], { Name, Street, Town }, { Jane, Main St., Naples } );
		structure( b[], { Town, Name, State }, { Florence, Linda, Tuscany } );

		echo( "a[] member names: ", set names( a[] ), " contents: ", set ( a[] )); // Outputs {Jane,Main St.,Naples}
		echo( "b[] member names: ", set names( b[] ), " contents: ", set ( b[] )); // Outputs {Linda,Tuscany,Florence}
		c[]  <== a[];
		c[] &<== b[];
		echo( "c[] member names: ", set names( c[] ), " contents: ", set ( c[] )); // Like A, but town overwritten
		pause("c[] has overwritten name and town from b[], but state is unchanged");

		c[]  <== a[];
		c[] |<== b[];
	
		echo( "c[] member names: ", set names( c[] ), " contents: ", set ( c[] )); // Like A, but town overwritten
		pause("b[] has overwritten members in c[], street is preserved.");

		c[]  <== a[];
		c[] +<== b[];
	
		echo( "c[] member names: ", set names( c[] ), " contents: ", set ( c[] )); // Like A, but town overwritten
		pause("Only state is added from b[], remaining data like a[]");

	    }


	    case(arrays) // Transactions on arrays
	    {

		
		array( a[], { Ha, He, Hi, Ho, Hu } );
		array( b[], { Hi, Hello, Ahoi } );

		c[]  <== b[]; // Make a copy
		c[] &<== a[]; // Hi, Hello and Ahoi are replaced by Ha, He, Hi
		echo( set(c[])); // Outputs {Ha,He,Hi}
		pause("Check that c[] is overwritten by first 3 elements of a[]: Ha, He, Hi");

		c[]  <== a[];
		c[] |<== b[];
		echo( set(c[])); // Outputs {Hi,Hello,Ahoi,Ho,Hu}
		pause("Check that c[] is extended by 2 additional elements: Ho and Hu");

		c[]  <== a[];
		c[] +<== b[]; // Plus operator will always convert to array
		echo( identify(c[]),":", set(c[])); // Output: array {Ha,He,Hi,Ho,Hu,Hi,Hello,Ahoi}
		pause("The elements in b[] are added to a[], containing 8 elements total.");

			echo(new line, "Try with nested array");

		array( a[1], { Hej, Hey, Heeh } );
		array( b[1], { Hallo, Allo, Haha } );

		c[]  <== a[];
		c[] |<== b[];
		inspect(c[]);
		pause("Check that c[] is extended by 2 additional elements with their submembers.");
 

		c[]  <== a[];
		c[] +<== b[];
		inspect(c[]);
		pause("The elements in b[] are added to a[], containing 8 elements total, and 6 submembers");

	    }

	    case(mixed to array) // Transactions on mix of arrays and structures
	    {

		array		( a[],  { Ha, He, Hi, Ho, Hu } );
		array		( a[1], { Hej, Hey, Hooh } ); // on He
		structure	( a[3], { English, French, German}, { Hello, Allo, Hallo } );

		structure	( b[],  { a, b, c, d, e, f, g }, { ha, he, hi, ho, hu, hä, hü } );
		array		( b[b], { hej, hey, heeh, hiih } );
		structure	( b[d], { Swedish, Spanish, English, German}, { hallå, hola, hello, hallo } );

		echo("Showing the variables a[] and b[]: ");
		inspect(a[]);
		inspect(b[]);

		pause("Let's start: Destination is array, source is structure ...");

		c[]  <== a[];
		c[] &<== b[];
		inspect(c[]);
		pause("Check that c[] is a[] &-overlayed with b[] on existing vlues ...");


		c[]  <== a[];
		c[] |<== b[];
		inspect(c[]);
		pause("Check that c[] is a[] |-overlayed with b[] on existing vlues ...");

		c[]  <== a[];
		c[] +<== b[];
		inspect(c[]);
		pause("Check that c[] is a[] +-overlayed with b[] on existing vlues ...");


	    }

	    case(mixed to structure) // Transactions on mix of arrays and structures
	    {

		array		( a[],  { Ha, He, Hi, Ho, Hu } );
		array		( a[1], { Hej, Hey, Hooh } ); // on He
		structure	( a[3], { English, French, German}, { Hello, Allo, Hallo } );

		structure	( b[],  { a, b, c, d, e, f, g }, { ha, he, hi, ho, hu, hä, hü } );
		array		( b[b], { hej, hey, heeh, hiih } );
		structure	( b[d], { Swedish, Spanish, English, German}, { hallå, hola, hello, hallo } );

		echo("Showing the variables a[] and b[]: ");
		inspect(a[]);
		inspect(b[]);

		pause("Let's start: Destination is array, source is structure ...");

		c[]  <== b[];
		c[] &<== a[];
		inspect(c[]);
		pause("Check that c[] is b[] &-overlayed with a[] on existing vlues ...");


		c[]  <== b[];
		c[] |<== a[];
		inspect(c[]);
		pause("Check that c[] is b[] |-overlayed with a[] on existing vlues ...");

		c[]  <== b[];
		c[] +<== a[];
		inspect(c[]);
		pause("Check that c[] is b[] +-overlayed with a[] on existing vlues ...");


	    }



	}
	echo(new line, "Test done.  Continue with menu");
    }
    while (selection[] <> interactive, back);

    if (selection[] = interactive) { interactive; exit; }


}