#!/usr/local/bin/Beyond4P

runtime settings [verbose]=quiet;
include ( Office Library );
include ( Support Library );

{	
	// Suppresses bla-bla while loading excel file
	runtime settings[verbose] 	= quiet;
	
	// load source file and patterns file
	table load excel file		( table, vagithub2.xlsx );
	table load excel file		( lookup patterns, Patterns.xlsx );
	
	// Insert space for header at first row, include header labels in this first row, then delete blank rows
	table insert rows		( table, 0 ); 
	[table:..,0] 			= { Raw, type, URL, description, language, license, members, stargazers, issues, 'pull-requests', last updated, need help, unknown };
	table delete blank rows		( table );

	// Counts the rows between the rows containing details
	index[] = 1;

	// process only rows in 'table' that meet selection criteria that
	// first character of the [Raw] field is a space OR non-break space  == row containing details
	table process selected rows	( table, ([Raw]{0}=' ',chr(160)),

		// Following code is executed if the current row begins wtih a space (or non-break space / chr(160) 
		// which is the row with details
		[type] 					= Details ; 
		index[] 				= 1;

		// Create an auxillary table (scratch table) with 2 columns
		table initialize			( aux table, { Values, Columns } );

		//put the set of tokenized values of [Raw] into column'Values'
		[aux table : Values, ..] 		= tokenize( [Raw], { auto convert, thousand separator, "," }, chr(160) );

		// syntax: tokenize ( [source field], {options}, {separators})

		// view intermediate results
		view (aux table);
		view pause;
		
		
		// Look up the pattern table and record the data type into the column 'Columns' and write the data into the appropriate columns.
		table lookup smart once ignore case  	( aux table, Values, Columns, lookup patterns, Patterns, Fields );
		table process 				( aux table, [^[Columns]] = [Values] );  // Note the '^' symbol. Study chapter 5.13 in the B4P manual

	  ,	// Comma. Following code is executed for all rows not beginning with space (i.e. contains URLS or descriptions) 

		if (index[]++ = 1) 	[URL] 		= [Raw];			// The first row is the URL
		else: 			[description] 	= [Raw];			// And the following rows contain descriptions (if existing)
	) ;


	// Combine the 'need help' info into the issues column

	table process selected rows	( table, [need help]!='', [issues] = literal([issues]) + " " + [need help] );


	// Consolidate the info into one row per item

	table fill vertically		( table, URL );
	table consolidate		( table, URL, {Raw, type, unknown, need help, description, language, license, members, stargazers, issues, 'pull-requests', last updated },
						      {4:delete,                      append,      overwrite if blank }, ' ' );

	table save ( table, Result.csv );
}
